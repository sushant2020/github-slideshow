{"version":3,"file":"static/js/22.ac8b853a.chunk.js","mappings":"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","sources":["app/pages/mainPages/Runrate.tsx","../node_modules/antd/es/row/index.js"],"sourcesContent":["import { Button, Col, DatePicker, Form, FormInstance, Input, Modal, Row, Slider, Switch, Table, message ,Pagination, Space} from 'antd'\nimport  { useEffect, useState } from 'react'\nimport type { SizeType } from 'antd/es/config-provider/SizeContext';\nimport {mainConfig} from '../../../config/mainConfig'\nimport ExcelJS from 'exceljs';\nimport moment from 'moment';\n\n\nfunction checkvalue(data:any)\n{\n  data=String(data)\n let darkRed=\"#8B0000\",lightRed=\"#FF0000\",amber=\"#FFBF00\",green=\"#00FF00\";\nif(!data) {return \"\"}\nlet filterDate=data.replace('%', '');\n\nlet remoceMinus=filterDate.replace('-','')\nif(remoceMinus==0) {return green}\nif(remoceMinus>= 100)\n {\n  return darkRed\n}\nelse\nif(remoceMinus>= 60 && remoceMinus<=99 )\n {\n  return lightRed\n}\nelse if(remoceMinus>= 15 && remoceMinus<=59 )\n {\n  return amber\n}\nelse if(remoceMinus>= 0 && remoceMinus<=14 )\n{\n  return green\n}\n\n\n}\n\nlet token = '';\n\nconst Runrate = () => {\n    let [form] = Form.useForm<FormInstance>();\n    const [isModalOpen, setIsModalOpen] = useState<any>(false);\n    const [downloadFlag,setdownloadFlag]=useState<any>(false)\n    const [size, setSize] = useState<SizeType>('middle');\n    const [disabled, setDisabled] = useState(false);\n    const [TableData, setTableData] = useState<any>([]);\n    const [loader,setloader]=useState<any>(false)\n  const [currentPage, setCurrentPage] = useState<any>(1)\n  const [rowCnt, setrowCnt] = useState<any>(0)\n\n\n    const [sorter, setsorter] = useState<any>({\n      columnKey: 'ProductAC4',\n      order: 'ascend',\n    })\n    useEffect(()=>{\n        getData();\n    },[sorter,currentPage])\n\n    const getData = async() => {\n        setloader(true)\n     await   fetch(`${mainConfig.MAIN_ENDPOINT}/api/get-runrate/${currentPage}/${sorter.columnKey}/${sorter.order==\"ascend\"?1:0}`, {\n          method: 'get',\n          headers: {\n            Authorization: `Bearer ${token}`,\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n          },\n        })\n          .then(function (response) {\n            if (response.status != 200) {\n              setTableData([])\n            }\n            response.json().then(function (data) {\n               \n              if (data.success == true) {\n                setTableData(data.data.products)\n                setrowCnt(data.data.rowCnt)\n                setloader(false)\n    \n              }\n            })\n          })\n          .catch(function (err) {\n            console.log('Fetch Error :-S', err)\n          })\n        \n        \n      }\n    const columns = [\n        \n\n        {\n            title: 'Aggregate Code',\n            dataIndex: 'ProductAC4',\n            key: 'ProductAC4',\n            sorter: true,\n            \n        },\n        {\n            title: 'Current Usage',\n            dataIndex: 'currentUsage',\n            key: 'currentUsage',\n            sorter: true\n        },\n        {\n            title: 'Target Volume',\n            dataIndex: 'targetVolume',\n            key: 'targetVolume',\n            sorter: true\n        },\n        {\n            title: 'Current run rate',\n            dataIndex: 'CurrentRunRate',\n            key: 'CurrentRunRate',\n            sorter:true\n        },\n        {\n            title: 'Projected Volume',\n            dataIndex: 'projectedVolume',\n            key: 'projectedVolume',\n            sorter:true\n        },\n        {\n            title: 'Projected Run Rate',\n            dataIndex: 'projectedRunRate',\n            key: 'projectedRunRate',\n            sorter:true\n        },\n        {\n            title: 'Projected Run Rate Over Target',\n            dataIndex: 'projectedRunRateOverTarget',\n            key: 'projectedRunRateOverTarget',\n            sorter:true,\n            render:(item:any,record:any)=>{\n              let abc=checkvalue(item)\n              return<div style={{background:`${abc}`}} className='text-center text-white fw-bold'>{item}</div>\n\n            }\n        },\n        {\n            title: 'Date',\n            dataIndex: 'asofdate',\n            key: 'asofdate',\n            render:(item:any)=>{\n              return<>{ moment(item).format('DD-MMM-YYYY')}</>\n            },\n            sorter:true\n        }\n    ];\n    // const handleFilterModalSubmit = async (value: any, pagenumber: any) => {\n    //     try {\n    //         const values = await form.validateFields(['Month', 'Year', 'AggregateCode']);\n    //         if (value && value.Month && value.Month._d) {\n    //             let Month = convertdate(value.Month._d)\n    //             SearchData('Month',Month.month)\n    //         }\n    //         if (value && value.Year && value.Year._d) {\n    //             let Year = convertdate(value.Year._d)\n    //             SearchData('year',Year.year)\n    //         }\n    //         if (value && value.AggregateCode) {\n    //             SearchData('AggregateCode',value.AggregateCode)\n    //         }\n    //         if (value && value.slicerRunrate && value.slicerRunrate[1]!=0) {\n    //             SearchData('crunrate',value.slicerRunrate)\n    //         }\n           \n    //         // setIsModalOpen(false)\n           \n    //         form.resetFields([\"enddate\", 'startdate', 'prodcode']);\n    //     } catch (error) {\n    //         console.error('Validation error:', error);\n    //     }\n    // };\n    const SearchData=async(value:any)=>{\n        \n        let tempArray:any=[]\n        // if (fieldType && value) {\n        //     tempData.map((a:any)=>{\n        //         if (a[fieldType]==value) {\n        //             tempArray.push(a)\n        //         }\n        //     })\n        //     setTableData(tempArray)\n        // }\n   \n        let Month = value && value.Month ?convertdate(value.Month._d):null\n        let Year = value && value.Year ?convertdate(value.Year._d):null\n        let AggregateCode=value && value.AggregateCode?value.AggregateCode:null;\n    let payload={\n      year :Year && Year.year?Year.year:\"\",\n      month : Month && Month.month?Month.month:\"\",\n      prodcode: AggregateCode\n  }\n       await fetch(`${mainConfig.MAIN_ENDPOINT}/api/search-runrate/1/ProductAC4/1`, {\n            method: 'post',\n            headers: {\n              Authorization: `Bearer ${token}`,\n              Accept: 'application/json',\n              'Content-Type': 'application/json',\n            },\n            body:JSON.stringify(payload)\n          })\n            .then(function (response) {\n              if (response.status != 200) {\n                setTableData([])\n              }\n              response.json().then(function (data) {\n               \n                 \n                if (data.success == true) {\n                  setTableData(data.data.products)\n                  setrowCnt(data.data.rowCnt)\n                  setloader(false)\n                  setIsModalOpen(false)\n      \n                }\n              })\n            })\n            .catch(function (err) {\n              console.log('Fetch Error :-S', err)\n            })\n\n\n    }\n    const convertdate = (datePayload: any) => {\n        const date = new Date(datePayload);\n        const year = date.getFullYear(); // Get the full year\n        const month = ('0' + (date.getMonth() + 1)).slice(-2); // Months are zero-based, so add 1\n        const day = ('0' + date.getDate()).slice(-2); // Get the day\n        const formattedDate = `${year}-${month}-${day}`;\n        return { year, month }\n    }\n    const onChange = (checked: boolean) => {\n        setDisabled(checked);\n      };\n      const downloadExcelFile =async (data:any)=>{\n        const workbook = new ExcelJS.Workbook();\n        const worksheet = workbook.addWorksheet('Sheet1');\n        const headers = [ \n            \"RANKING\",\n            \"AGG CODE\",\n            \"SIGMA CODE\",\n          \n            \"PRODUCT\",\n            \"CURRENT USAGE\",\n            \"CURRENT RUNRATE\",\n            \"TARGET VOLUME\",\n            \"PROJECTED VOLUME\",\n            \"PROJECTED RUNRATE\",\n            \"PROJECTED RUNRATE OVER TARGET\",\n            \"DATE\"\n            \n\n          \n            ];\n            \n            worksheet.addRow(headers);\n            data.forEach((row:any) => {\n            \n                const { \n                    Ranking,\n                  \n                   ProductAC4, \n                   \n                    SigmaCode,\n                    ProductDesc, \n                    currentUsage,\n                    CurrentRunRate,\n                    targetVolume,\n                    projectedVolume,\n                    projectedRunRate,\n                    projectedRunRateOverTarget,\n                    asofdate\n                    // PHOENIX,\n                    // TRIDENT,\n                    // AAH,\n                    // COLORAMA,\n                    // BESTWAY,\n                    // SENSITIVITY\n                 } = row;\n                const rowValues = [\n                    Ranking,\n                    ProductAC4,\n                  \n                    SigmaCode,\n                    ProductDesc, \n                    currentUsage,\n                    CurrentRunRate,\n                    targetVolume,\n                    projectedVolume,\n                    projectedRunRate,\n                    projectedRunRateOverTarget,\n                    asofdate\n                    // PHOENIX,\n                    // TRIDENT,\n                    // AAH,\n                    // COLORAMA,\n                    // BESTWAY,\n                    // SENSITIVITY\n                ];\n                const newRow = worksheet.addRow(rowValues);\n                const projectedRunRateOverTargett = headers.indexOf('PROJECTED RUNRATE OVER TARGET') + 1;\n             \n              let color=checkvalue(projectedRunRateOverTarget)\n            \n                if (row && row.projectedRunRateOverTarget  ) {\n                  newRow.getCell(projectedRunRateOverTargett).fill = {\n                    type: 'pattern',\n                    pattern: 'solid',\n                    fgColor: { argb: color && color!='' ? color.replace('#',''):\"\" }, \n                    \n                   \n                    \n                  };\n                }\n               \n              });\n        \n            \n              const buffer = await workbook.xlsx.writeBuffer();\n        \n              const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n              const url = window.URL.createObjectURL(blob);\n              var tempLink = document.createElement('a')\n              tempLink.href = url\n              tempLink.setAttribute('download', `${'PriceReview'}.xlsx`)\n              tempLink.click()\n      }\n      const downloadData =async(value:any)=>{\n      \n        let Month = value && value.Month ?convertdate(value.Month._d):null\n        let Year = value && value.Year ?convertdate(value.Year._d):null\n        let AggregateCode=value && value.AggregateCode?value.AggregateCode:null;\n    let payload={\n      year :Year && Year.year?Year.year:\"\",\n      month : Month && Month.month?Month.month:\"\",\n      prodcode: AggregateCode\n  }\n  //       let payload={\n  //         sdate:\"\",\n  //         edate:\"\",\n  //         prodcode: \"\"\n         \n  //     }\n      await  fetch(`${mainConfig.MAIN_ENDPOINT}/api/download-runrate`, {\n          method: 'post',\n          headers: {\n            Authorization: `Bearer ${token}`,\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n          },\n          body:JSON.stringify(payload)\n         \n        })\n          .then(function (response) {\n          \n            response.json().then(function (data) {\n              // if (response.status != 200) {\n              //   setTableData([])\n              // }\n             \n              if(data?.data?.products)\n              {\n                downloadExcelFile(data.data.products)\n                setIsModalOpen(false)\n              }\n              else\n              {\n                message.error(data.message)\n                setIsModalOpen(false)\n\n              }\n         \n             \n               \n             \n            })\n          })\n          .catch(function (err) {\n            console.log('Fetch Error :-S', err)\n          })\n      }\n  token = JSON.parse(localStorage.getItem('portalUserDataToken') || '')\n\n    return (\n        <div className='pt-4 m-2'>\n        <div className='card'>\n          <div className='card-body py-3 '>\n          <div className='row m-4 p-2'>\n              <div className='col-4'>\n                <div className='card-toolbar' style={{width: '100%'}}>\n                  <h3 className='card-title align-items-start flex-column'>\n                    <span\n                      className='card-label fw-bolder fs-3 mb-1'\n                      style={{color: 'rgb(138, 38, 80)'}}\n                    >\n                     Runrate\n                    {/* <>({dateTodayes})</> */}\n                    </span>\n                  </h3>\n                </div>\n              </div>\n            \n              <div className='col-4'>\n                <div className='text-center'> \n                {/* <Tooltip placement=\"topLeft\" title={\"Notify Pricer\"}>\n                  <Button type=\"primary\"  onClick={handleNotification} loading={buttonLoader}>Notify Pricer</Button>\n                  </Tooltip>\n                */}\n               \n                  </div>\n              </div>\n              <div className='col-4'>\n                <div id='outer'>\n                  <div className='inner p-1'>\n                <Space>\n                <Button type=\"primary\" onClick={() => setIsModalOpen(true)}>Search</Button>\n                \n                    <Button type=\"primary\" \n                   onClick={() => getData}\n                    >Reset</Button>\n                      <Button type=\"primary\"\n               onClick={()=>{setIsModalOpen(true);\n                setdownloadFlag(true)}\n              }\n                   >Export Data</Button>\n                  </Space>  \n              \n                  \n                  </div>\n                  <div className='inner p-1'>\n                \n                  \n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className='p-2'>\n               \n\n            </div>\n            <Table\n            loading={loader}\n                dataSource={TableData}\n                columns={columns}\n                pagination={false}\n            onChange={(val: any, filter: any, sorter: any, extra: any) => {\n                setsorter({\n                    ...sorter\n                })\n            }}\n            scroll={{\n              // x: 2400,\n              // y: 500,\n            }}\n            />\n             <div className='row text-end m-4'>\n            <Pagination\n              defaultCurrent={currentPage}\n              defaultPageSize={20}\n              current={currentPage}\n              total={rowCnt}\n              onChange={(e) => {\n                setCurrentPage(e)\n              }}\n              hideOnSinglePage={true}\n              showSizeChanger={false}\n            />\n          </div>\n\n            {/* modal for filter */}\n            <Modal title={false} open={isModalOpen} onCancel={() =>{ setIsModalOpen(false);setdownloadFlag(false)}} footer={null} destroyOnClose>\n                <Form form={form} onFinish={(value) => {downloadFlag==true?downloadData(value):SearchData(value)}} preserve={false} >\n                    <p>You Can Select Date Range 1 Month.</p>\n                    <Row >\n                        <Col span={12}>\n                            <Form.Item\n                                label=\"Year\"\n                                name=\"Year\"\n                                rules={[{ required: false, message: 'Please input Year!' }]}\n                            >\n                                <DatePicker size={size} picker=\"year\" />\n                            </Form.Item>\n                        </Col>\n                        <Col span={12}>\n                            <Form.Item\n                                label=\"Month\"\n                                name=\"Month\"\n                                initialValue={undefined}\n                                rules={[{ required: false, message: 'Please input Month!' }]}\n                            >\n                                <DatePicker size={size} picker=\"month\" />\n                            </Form.Item>\n                        </Col>\n                        {/* title=='Search' ?false: true */}\n                        <Col span={23}>\n                            <Form.Item\n                                label=\"Aggregate Code\"\n                                name=\"AggregateCode\"\n                                rules={[{ required: false, message: 'Please input Aggregate Code!' }]}\n                            >\n                                <Input placeholder=\"Aggregate Code\" />\n                            </Form.Item>\n                        </Col>\n                      {/* {\n                        !downloadFlag &&  <Col span={24}>\n                        <label>Run Rate- 0 to 100%</label>\n                        <Form.Item\n                            name=\"slicerRunrate\"\n                            rules={[{ required: false, message: 'Please input run rate- 0 to 100%!' }]}\n                        >\n                            <Slider className='primary' range defaultValue={[0, 10]}  disabled={disabled} />\n                    </Form.Item>\n                </Col>\n                      }   */}\n                </Row>\n                <Form.Item>\n                    <div className=\"d-flex justify-content-end\">\n                        <Button\n                            htmlType=\"submit\"\n                            type=\"default\"\n                            className=\"get-report-btn\"\n                            style={{ backgroundColor: \"#FAFAFA\" }}\n                        >\n                   {\n                    downloadFlag == true? \"Download\":\"Search\"\n                   }         \n                        </Button>\n                    </div>\n                </Form.Item>\n            </Form>\n        </Modal>\n\n\n        </div >\n        </div>\n        </div>\n    )\n}\n\nexport default Runrate","import { Row } from '../grid';\nexport default Row;"],"names":["checkvalue","data","green","String","remoceMinus","replace","token","Runrate","form","Form","useForm","isModalOpen","setIsModalOpen","useState","downloadFlag","setdownloadFlag","size","setSize","disabled","setDisabled","TableData","setTableData","loader","setloader","currentPage","setCurrentPage","rowCnt","setrowCnt","sorter","setsorter","columnKey","order","useEffect","getData","async","fetch","concat","mainConfig","MAIN_ENDPOINT","method","headers","Authorization","Accept","then","response","status","json","success","products","catch","err","console","log","columns","title","dataIndex","key","render","item","record","abc","_jsx","style","background","className","children","_Fragment","moment","format","convertdate","datePayload","date","Date","year","getFullYear","month","getMonth","slice","day","getDate","downloadData","Month","value","_d","Year","AggregateCode","payload","prodcode","body","JSON","stringify","_data$data","workbook","ExcelJS","worksheet","addWorksheet","addRow","forEach","row","Ranking","ProductAC4","SigmaCode","ProductDesc","currentUsage","CurrentRunRate","targetVolume","projectedVolume","projectedRunRate","projectedRunRateOverTarget","asofdate","rowValues","newRow","projectedRunRateOverTargett","indexOf","color","getCell","fill","type","pattern","fgColor","argb","buffer","xlsx","writeBuffer","blob","Blob","url","window","URL","createObjectURL","tempLink","document","createElement","href","setAttribute","click","downloadExcelFile","message","error","parse","localStorage","getItem","_jsxs","width","id","Space","Button","onClick","Table","loading","dataSource","pagination","onChange","val","filter","extra","scroll","Pagination","defaultCurrent","defaultPageSize","current","total","e","hideOnSinglePage","showSizeChanger","Modal","open","onCancel","footer","destroyOnClose","onFinish","SearchData","preserve","Row","Col","span","Item","label","name","rules","required","DatePicker","picker","initialValue","undefined","Input","placeholder","htmlType","backgroundColor"],"sourceRoot":""}