{"version":3,"file":"static/js/852.0d0f33bd.chunk.js","mappings":"kUAYA,MAAMA,EAASC,EAAAA,EAAOD,OAChBE,EAAkBC,EAAAA,cAA8C,MAEtE,IAAIC,EAAQ,GACVC,EAAQ,GAaR,MAAMC,EAA0CC,IAAwB,IAAvB,MAACC,KAAUC,GAAMF,EAChE,MAAOG,GAAQC,EAAAA,EAAKC,UACpB,OACEC,EAAAA,EAAAA,KAACF,EAAAA,EAAI,CAACD,KAAMA,EAAMI,WAAW,EAAMC,UACjCF,EAAAA,EAAAA,KAACX,EAAgBc,SAAQ,CAACC,MAAOP,EAAKK,UACpCF,EAAAA,EAAAA,KAAA,SAAQJ,OAEL,EAaLS,EAA4CC,IAQ3C,IAR4C,MACjDC,EAAK,SACLC,EAAQ,SACRN,EAAQ,UACRO,EAAS,OACTC,EAAM,WACNC,KACGC,GACJN,EACC,MAAOO,EAASC,IAAcC,EAAAA,EAAAA,WAAS,GACjCC,GAAWC,EAAAA,EAAAA,QAAiB,MAC5BpB,GAAOqB,EAAAA,EAAAA,YAAW7B,IAExB8B,EAAAA,EAAAA,YAAU,KACM,IAADC,EAATP,IACc,QAAhBO,EAAAJ,EAASK,eAAO,IAAAD,GAAhBA,EAAkBE,QACpB,GACC,CAACT,IAEJ,MAAMU,EAAaA,KACjBT,GAAYD,GACZhB,EAAK2B,eAAe,CAAC,CAACf,GAAYC,EAAOD,IAAY,EAGjDgB,EAAOC,UACX,IACE,MAAMC,QAAe9B,EAAK+B,iBAE1BL,IACAZ,EAAW,IAAID,KAAWiB,GAC5B,CAAE,MAAOE,GACPC,QAAQC,IAAI,eAAgBF,EAC9B,GAGF,IAAIG,EAAY9B,EAuBhB,OArBIM,IACFwB,EAAYnB,GACVb,EAAAA,EAAAA,KAACF,EAAAA,EAAKmC,KAAI,CACRC,MAAO,CAACC,OAAQ,GAChBC,KAAM3B,EACN4B,MAAO,CACL,CACEC,UAAU,EACVC,QAAQ,GAADC,OAAKjC,EAAK,mBAEnBL,UAEFF,EAAAA,EAAAA,KAACyC,EAAAA,EAAK,CAACC,IAAK1B,EAAU2B,aAAclB,EAAMmB,OAAQnB,OAGpDzB,EAAAA,EAAAA,KAAA,OAAK6C,UAAU,2BAA2BX,MAAO,CAACY,aAAc,IAAKC,QAASxB,EAAWrB,SACtFA,MAKAF,EAAAA,EAAAA,KAAA,SAAQY,EAASV,SAAG8B,GAAe,GAexC,YAACgB,GAAeC,EAAAA,EAu7CtB,SAAeC,EAAAA,EAAAA,IAt7Cf,SAAyBtD,GACvB,MAAOuD,EAASC,IAAcrC,EAAAA,EAAAA,WAAc,IACrCsC,EAAYC,IAAgBvC,EAAAA,EAAAA,UAAc,IAC1CwC,EAAKC,IAASzC,EAAAA,EAAAA,UAAc,KAC5B0C,EAAgBC,IAAqB3C,EAAAA,EAAAA,UAAgB,KACrD4C,EAAgBC,IAAqB7C,EAAAA,EAAAA,UAAgB,KACrD8C,EAAgBC,IAAqB/C,EAAAA,EAAAA,UAAgB,KACrDgD,EAAgBC,IAAqBjD,EAAAA,EAAAA,UAAgB,KACrDkD,EAAaC,IAAkBnD,EAAAA,EAAAA,UAAc,mBAC7CoD,EAAgBC,IAAqBrD,EAAAA,EAAAA,UAAc,QACnDsD,EAAgBC,IAAmBvD,EAAAA,EAAAA,UAAc,QACjDwD,EAAeC,IAAoBzD,EAAAA,EAAAA,UAAc,QAEjD0D,EAAYC,IAAiB3D,EAAAA,EAAAA,UAAc,QAC3C4D,EAAaC,IAAmB7D,EAAAA,EAAAA,UAAc,QAC9C8D,EAAcC,IAAmB/D,EAAAA,EAAAA,UAAc,OAE/CgE,EAAcC,IAAmBjE,EAAAA,EAAAA,UAAc,OAC/CkE,EAAWC,IAAgBnE,EAAAA,EAAAA,UAAc,OACzCoE,EAAQC,KAAarE,EAAAA,EAAAA,UAAc,WACnCsE,GAAaC,KAAkBvE,EAAAA,EAAAA,UAAc,aAE7CwE,GAAWC,KAAgBzE,EAAAA,EAAAA,UAAc,IACzC0E,GAAYC,KAAiB3E,EAAAA,EAAAA,UAAc,IAC3CM,GAASsE,KAAc5E,EAAAA,EAAAA,UAAS,IAChC6E,GAAUC,KAAe9E,EAAAA,EAAAA,UAAS,IAClC+E,GAAOC,KAAYhF,EAAAA,EAAAA,UAAS,IAC5BiF,GAAQC,KAAalF,EAAAA,EAAAA,UAAS,IAC9BmF,GAAUC,KAAepF,EAAAA,EAAAA,UAAS,IAClCqF,GAAWC,KAAgBtF,EAAAA,EAAAA,UAAS,IACpCuF,GAAOC,KAAYxF,EAAAA,EAAAA,UAAgB,KACnCyF,GAAQC,KAAa1F,EAAAA,EAAAA,UAAgB,KAErC2F,GAAUC,KAAe5F,EAAAA,EAAAA,UAAc,OACvC6F,GAAQC,KAAa9F,EAAAA,EAAAA,UAAc,OACnC+F,GAAaC,KAAkBhG,EAAAA,EAAAA,UAAc,CAClDiG,QAAS,GACTC,KAAM,MAEDC,GAAUC,KAAepG,EAAAA,EAAAA,UAAc,OACvCqG,GAAWC,KAAgBtG,EAAAA,EAAAA,UAAc,OAEzCuG,GAAWC,KAAgBxG,EAAAA,EAAAA,WAAc,IACzCyG,GAAYC,KAAgB1G,EAAAA,EAAAA,UAAc,IAC1C2G,GAAaC,KAAiB5G,EAAAA,EAAAA,UAAc,IAE5C6G,GAAQC,KAAa9G,EAAAA,EAAAA,UAAc,CACxC+G,UAAW,MACXC,MAAO,YAEFC,GAASC,KAAclH,EAAAA,EAAAA,UAAc,CAC1C+G,UAAW,MACXC,MAAO,YAGT5G,EAAAA,EAAAA,YAAU,KACRiC,GAAW,GAGP8E,GAAcV,GAAatB,IAI3BiC,GAAaT,GAActB,GAAU,GAIxC,CAACnC,EAAYuD,GAAYnG,KAC5B,MAqFI+G,GArFsF,CACxF,CACA7H,MAAO,WACPE,UAAW,MACX4H,IAAK,MAELT,OAAQA,CAACU,EAAOC,IAAkBD,EAAEE,IAAIC,cAAcF,EAAEC,KACxDE,OAAQA,CAACC,EAAWjI,KAKdV,EAAAA,EAAAA,KAAC4I,EAAAA,GAAI,CAEHC,GAAI,CACFC,SAAU,WAEVC,MAAO,CAACC,QAAStI,EAAOuI,eAAgB1F,KAAM7C,IAC9CR,SAEDyI,KAMX,CACEpI,MAAO,OACPE,UAAW,OACX4H,IAAK,OACL7H,UAAS,EACToH,OAAQA,CAACU,EAAOC,IAAkBD,EAAEY,KAAKT,cAAcF,EAAEW,MACzDR,OAAOA,CAACC,EAASjI,KACRV,EAAAA,EAAAA,KAACyC,EAAAA,EAAK,CAACrC,MAAOuI,KAIzB,CACEpI,MAAO,cACPE,UAAW,cACX4H,IAAK,cACLT,OAAQA,CAACU,EAAOC,IAAkBD,EAAEa,YAAYV,cAAcF,EAAEY,cAElE,CACE5I,MAAO,aACPE,UAAW,aACX4H,IAAK,aACLT,OAAQA,CAACU,EAAOC,IAAkBD,EAAEc,WAAWX,cAAcF,EAAEa,YAC/DV,OAASC,GACFA,EACEU,IAAOV,GAAMW,OAAO,gBADTtJ,EAAAA,EAAAA,KAAAuJ,EAAAA,SAAA,CAAArJ,SAAE,OAKxB,CACEK,MAAO,SACPE,UAAW,SACX4H,IAAK,SACLT,OAAQA,CAACU,EAAOC,IAAkBD,EAAEkB,OAAOf,cAAcF,EAAEiB,QAC3Dd,OAAQA,CAACC,EAAajI,IAEfiI,EACU,WAARA,GACL3I,EAAAA,EAAAA,KAAA,UACE6C,UAAU,8EAGVX,MAAO,CAACuH,OAAO,QAAQvJ,SAEtByI,KAGH3I,EAAAA,EAAAA,KAAA,UACE6C,UAAU,8EAGVX,MAAO,CAACuH,OAAO,QAAQvJ,SAEtByI,KAjBa3I,EAAAA,EAAAA,KAAAuJ,EAAAA,SAAA,CAAArJ,SAAE,QAwBKwJ,KAAKC,GAC7BA,EAAInJ,SAGF,IACFmJ,EACHC,OAASlJ,IAAgB,CACvBA,SACAF,SAAUmJ,EAAInJ,SACdC,UAAWkJ,EAAIlJ,UACfF,MAAOoJ,EAAIpJ,MACXI,iBATKgJ,IAaLhJ,GAAckJ,IAElB,IAAIC,EAAU,CACZC,QAASF,EAAIX,MAEf,IACEc,MAAM,GAADxH,OAAIyH,EAAAA,EAAWC,cAAa,6BAAA1H,OAA4BqH,EAAIM,SAAW,CAC1EC,OAAQ,MACRC,QAAS,CACPC,cAAc,UAAD9H,OAAYhD,GACzB+K,OAAQ,mBACR,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUZ,KAEpBa,MAAK,SAAUC,GACS,KAAnBA,EAASpB,QAIboB,EAASC,OAAOF,MAAK,SAAUpH,GAC7BhB,EAAAA,GAAQuI,QAAQvH,EAAKhB,SACrB4F,GAAaT,GAActB,GAE7B,GACF,IACC2E,OAAM,SAAUC,GAAM,GAC3B,CAAE,MAAOA,GACPlJ,QAAQC,IAAI,SAAUiJ,EACxB,GAEMC,GAAS,CAAC,CACd1K,MAAO,WACPE,UAAW,MACX4H,IAAK,MACLT,OAAQA,CAACU,EAAOC,IAAkBD,EAAEE,IAAIC,cAAcF,EAAEC,KACxDE,OAAQA,CAACC,EAAWjI,KAKdV,EAAAA,EAAAA,KAAC4I,EAAAA,GAAI,CAEHC,GAAI,CACFC,SAAU,WAEVC,MAAO,CAACC,QAAStI,EAAOuI,eAAgB1F,KAAM7C,IAC9CR,SAEDyI,KAOX,CACEpI,MAAO,OACPE,UAAW,OACX4H,IAAK,OACLT,OAAQA,CAACU,EAAOC,IAAkBD,EAAEY,KAAKT,cAAcF,EAAEW,OAE3D,CACE3I,MAAO,cACPE,UAAW,cACX4H,IAAK,cACLT,OAAQA,CAACU,EAAOC,IAAkBD,EAAE4C,YAAYzC,cAAcF,EAAE2C,aAChE1K,UAAU,GAEZ,CACED,MAAO,cACPE,UAAW,cACX4H,IAAK,cACLT,OAAQA,CAACU,EAAOC,IAAkBD,EAAEa,YAAYV,cAAcF,EAAEY,cAElE,CACE5I,MAAO,aACPE,UAAW,aACX4H,IAAK,aACLT,OAAQA,CAACU,EAAOC,IAAkBD,EAAEc,WAAWX,cAAcF,EAAEa,YAC/DV,OAASC,GACFA,EACEU,IAAOV,GAAMW,OAAO,gBADTtJ,EAAAA,EAAAA,KAAAuJ,EAAAA,SAAA,CAAArJ,SAAE,OAKxB,CACEK,MAAO,SACPE,UAAW,SACX4H,IAAK,SACLT,OAAQA,CAACU,EAAOC,IAAkBD,EAAEkB,OAAOf,cAAcF,EAAEiB,QAC3Dd,OAAQA,CAACC,EAAajI,IACfiI,EACU,WAARA,GACNwC,EAAAA,EAAAA,MAAA5B,EAAAA,SAAA,CAAArJ,SAAA,CAAE,KAACF,EAAAA,EAAAA,KAAA,UACA6C,UAAU,8EACVtC,MAAM,yBACNwC,QAASA,IAAMqI,GAAW1K,GAAQR,SAEjCyI,QAIH3I,EAAAA,EAAAA,KAAA,UACE6C,UAAU,8EACVtC,MAAM,oBACNwC,QAASA,IAAMsI,GAAY3K,GAAQR,SAElCyI,KAhBa3I,EAAAA,EAAAA,KAAAuJ,EAAAA,SAAA,CAAArJ,SAAE,QAwBlBgI,GAAgBA,CAACpC,EAAYI,KACjC,IACE8D,MAAM,GAADxH,OAAIyH,EAAAA,EAAWC,cAAa,yBAAA1H,OAAwBsD,EAAK,KAAAtD,OAAI0D,GAAY,CAC5EkE,OAAQ,MACRC,QAAS,CACPC,cAAc,UAAD9H,OAAYhD,GACzB+K,OAAQ,mBACR,eAAgB,sBAGjBI,MAAK,SAAUC,GACS,KAAnBA,EAASpB,SACX8B,aAAaC,QACbC,OAAOC,SAASC,UAGlBd,EAASC,OAAOF,MAAK,SAAUpH,GAC7BO,EAAkBP,EAAKA,KAAKM,gBAC5BH,EAAkBH,EAAKA,KAAKM,gBAC5B0C,GAAShD,EAAKA,KAAK+C,OACnBd,GAAajC,EAAKA,KAAKoI,sBACvBvI,GAAW,EACb,GACF,IACC2H,OAAM,SAAUC,GACf5H,GAAW,EACb,GACJ,CAAE,MAAO4H,GAAM,GAGX7C,GAAeA,CAACnC,EAAaI,KACjC,IACE4D,MAAM,GAADxH,OAAIyH,EAAAA,EAAWC,cAAa,yBAAA1H,OAAwBwD,EAAM,KAAAxD,OAAI4D,GAAa,CAC9EgE,OAAQ,MACRC,QAAS,CACPC,cAAc,UAAD9H,OAAYhD,GACzB+K,OAAQ,mBACR,eAAgB,sBAGjBI,MAAK,SAAUC,GACS,KAAnBA,EAASpB,QAIboB,EAASC,OAAOF,MAAK,SAAUpH,GAE7BS,EAAkBT,EAAKA,KAAKQ,gBAC5BH,EAAkBL,EAAKA,KAAKQ,gBAC5B0C,GAAUlD,EAAKA,KAAK+C,OAEpBZ,GAAcnC,EAAKA,KAAKqI,sBAExBxI,GAAW,EACb,GACF,IACC2H,OAAM,SAAUC,GACf5H,GAAW,EACb,GACJ,CAAE,MAAO4H,GAAM,GAGXI,GAAc7H,IAElB,MAAMsI,EAAK,CACTC,WAAW,GAADtJ,OAAKe,EAAKuI,YACpBC,QAAQ,GAADvJ,OAAKe,EAAKwI,SACjBvC,OAAQ,KAEV,IACEQ,MAAM,GAADxH,OAAIyH,EAAAA,EAAWC,cAAa,qBAAA1H,OAAoBe,EAAK4G,SAAW,CACnEC,OAAQ,MACRC,QAAS,CACPC,cAAc,UAAD9H,OAAYhD,GACzB+K,OAAQ,mBACR,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUmB,KAEpBlB,MAAK,SAAUC,GACS,KAAnBA,EAASpB,QAIboB,EAASC,OAAOF,MAAK,SAAUpH,GACT,GAAhBA,EAAKuH,UACPvI,EAAAA,GAAQuI,QAAQvH,EAAKhB,SAEnBwD,GAAS1E,IACTsE,GAAWtE,IACXoG,GAAepG,IACfsG,GAAgBtG,IAGhB6G,GAAc7G,GAAS6E,IACvBiC,GAAaT,GAActB,IAGjC,GACF,IACC2E,OAAM,SAAUC,GAAM,GAC3B,CAAE,MAAOA,GACPlJ,QAAQC,IAAI,SAAUiJ,EACxB,GAGIK,GAAe9H,IAGnB,MAAMsI,EAAK,CACTC,WAAW,GAADtJ,OAAKe,EAAKuI,YACpBC,QAAQ,GAADvJ,OAAKe,EAAKwI,SACjBvC,OAAQ,KAEV,IACEQ,MAAM,GAADxH,OAAIyH,EAAAA,EAAWC,cAAa,qBAAA1H,OAAoBe,EAAK4G,SAAW,CACnEC,OAAQ,MACRC,QAAS,CACPC,cAAc,UAAD9H,OAAYhD,GACzB+K,OAAQ,mBACR,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUmB,KAEpBlB,MAAK,SAAUC,GACS,KAAnBA,EAASpB,QAIboB,EAASC,OAAOF,MAAK,SAAUpH,GACT,GAAhBA,EAAKuH,UACPvI,EAAAA,GAAQuI,QAAQvH,EAAKhB,SAGnBwD,GAAS1E,IACTsE,GAAWtE,IACX6G,GAAc7G,GAAS6E,IACvBiC,GAAaT,GAActB,IAGjC,GACF,IACC2E,OAAM,SAAUC,GACflJ,QAAQC,IAAI,kBAAmBiJ,EACjC,GACJ,CAAE,MAAOA,GACPlJ,QAAQC,IAAI,SAAUiJ,EACxB,GAsRIgB,GAAa,CACjBxB,KAAM,CACJX,IAAKpK,EACLwM,KAAM5L,IAGVb,EAAQiL,KAAKyB,MAAMZ,aAAaa,QAAQ,wBAA0B,IAClE5M,EAAQkL,KAAKyB,MAAMZ,aAAaa,QAAQ,uBAAyB,IACjE,MAAMC,GAAkB,iBAAT7M,EAA0B,CAAC,YAAY,kBAAqB,CAAC,iBAAiB,kBAE7F,OACES,EAAAA,EAAAA,KAACV,EAAAA,SAAc,CAAAY,UAEXiL,EAAAA,EAAAA,MAAC7L,EAAAA,SAAc,CAAAY,SAAA,EACbiL,EAAAA,EAAAA,MAAA,MAAItI,UAAU,yCAAyCX,MAAO,CAACC,OAAQ,MAAMjC,SAAA,EAC3EF,EAAAA,EAAAA,KAAC4I,EAAAA,GAAI,CAACC,GAAG,QAAQhG,UAAU,sBAAqB3C,UAC9CF,EAAAA,EAAAA,KAAA,MAAI6C,UAAU,uBAAsB3C,SAAC,WAChC,UACCF,EAAAA,EAAAA,KAAA,MAAI6C,UAAU,uBAAsB3C,SAAC,mBAG/CF,EAAAA,EAAAA,KAAA,OAAK6C,UAAU,mBAAmBX,MAAO,CAACmK,UAAW,MAAMnM,UACzDF,EAAAA,EAAAA,KAAA,OAAK6C,UAAU,aAAY3C,UACzBF,EAAAA,EAAAA,KAAA,OAAK6C,UAAU,iCAAgC3C,UAC7CF,EAAAA,EAAAA,KAAA,OAAK6C,UAAU,kBAAiB3C,UAC9BiL,EAAAA,EAAAA,MAAA,OAAKtI,UAAS,OAAS3C,SAAA,EACrBF,EAAAA,EAAAA,KAAA,OAAK6C,UAAU,4BAA2B3C,UACxCF,EAAAA,EAAAA,KAAA,MAAI6C,UAAU,2CAA0C3C,UACtDF,EAAAA,EAAAA,KAAA,QACE6C,UAAU,iCACVX,MAAO,CAACoK,MAAO,oBAAoBpM,SACpC,oBAKLF,EAAAA,EAAAA,KAAA,OAAK6C,UAAU,wDAAuD3C,UACpEF,EAAAA,EAAAA,KAAA,MAAI6C,UAAU,2CAA0C3C,UACtDF,EAAAA,EAAAA,KAAA,QAAMuM,SAzJNC,IACpB7F,GAAY,MACZE,GAAU,MAEV2F,EAAEC,iBACF,IAAIC,EAAY,CACdC,UAAWjG,GACXkG,QAAShG,GACTsC,KAAMpC,GAAYE,QAClBmC,YAAajC,GACbgE,YAAa9D,IAGf,IACqB,kBAAfnD,EACF+F,MAAM,GAADxH,OAAIyH,EAAAA,EAAWC,cAAa,2BAA2B,CAC1DE,OAAQ,OACRC,QAAS,CACPC,cAAc,UAAD9H,OAAYhD,GACzB+K,OAAQ,mBACR,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUgC,KAEpB/B,MAAK,SAAUC,GACS,KAAnBA,EAASpB,QAIboB,EAASC,OAAOF,MAAK,SAAUpH,GAC7BH,GAAW,GAEXU,EAAkBP,EAAKA,KAAKsJ,sBAC5BtF,IAAa,GAEbnE,GAAW,EACb,GACF,IACC2H,OAAM,SAAUC,GACf5H,GAAW,EACb,IAEF4G,MAAM,GAADxH,OAAIyH,EAAAA,EAAWC,cAAa,2BAA2B,CAC1DE,OAAQ,OACRC,QAAS,CACPC,cAAc,UAAD9H,OAAYhD,GACzB+K,OAAQ,mBACR,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUgC,KAEpB/B,MAAK,SAAUC,GACS,KAAnBA,EAASpB,QAIboB,EAASC,OAAOF,MAAK,SAAUpH,GAC7BH,GAAW,GAEXY,EAAkBT,EAAKA,KAAKuJ,sBAC5BvF,IAAa,GACbnE,GAAW,EACb,GACF,IACC2H,OAAM,SAAUC,GACf5H,GAAW,EACb,GAEN,CAAE,MAAO4H,GACPlJ,QAAQC,IAAI,SAAUiJ,EACxB,GAmFiD9K,UAC3BiL,EAAAA,EAAAA,MAAC4B,EAAAA,EAAG,CAACC,QAAQ,eAAeC,OAAQ,CAACC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAAInN,SAAA,EAClEF,EAAAA,EAAAA,KAACsN,EAAAA,EAAG,CACFJ,GAAI,CAACK,KAAM,IACXF,GAAI,CAACE,KAAM,EAAGC,OAAQ,GACtBJ,GAAI,CAACG,KAAM,EAAGC,OAAQ,GACtB3K,UAAU,OAAM3C,UAGlBF,EAAAA,EAAAA,KAACgD,EAAW,CACVyK,aAAc,CAAC/G,GAAUE,IACzB8G,SAAWC,IA3FjBA,KACpB,GAAIA,EAAM,CACR,IAAIC,EAAWvE,IAAOsE,EAAK,IAAIrE,OAAO,cAClCuE,EAAYxE,IAAOsE,EAAK,IAAIrE,OAAO,cAEvC3C,GAAYiH,GACZ/G,GAAUgH,EACZ,KACqB,kBAAf5J,GACFiE,GAAcpC,GAAOI,IACrBP,GAAW,GACX4B,IAAa,KAEbY,GAAarC,GAAOI,IACpBL,GAAY,GACZ0B,IAAa,GAEjB,EA0E+CuG,CAAaH,EAAK,OAKzC3N,EAAAA,EAAAA,KAACsN,EAAAA,EAAG,CACFJ,GAAI,CAACK,KAAM,IACXF,GAAI,CAACE,KAAM,EAAGC,OAAQ,GACtBJ,GAAI,CAACG,KAAM,EAAGC,OAAQ,GACtB3K,UAAU,OAAM3C,UAEhBF,EAAAA,EAAAA,KAAA,SACE+N,KAAK,OACLlL,UAAU,kCACVmL,YAAa,qBACb5L,KAAK,UACLhC,MAAO0G,GAAYE,QACnB0G,SAAWlB,IACTzF,GAAe,IACVD,GACH,CAAC0F,EAAEyB,OAAO7L,MAAOoK,EAAEyB,OAAO7N,OAC1B,MAKE,iBAATb,GACC4L,EAAAA,EAAAA,MAAA5B,EAAAA,SAAA,CAAArJ,SAAA,EACEF,EAAAA,EAAAA,KAACsN,EAAAA,EAAG,CACFJ,GAAI,CAACK,KAAM,IACXF,GAAI,CAACE,KAAM,EAAGC,OAAQ,GACtBJ,GAAI,CAACG,KAAM,EAAGC,OAAQ,GACtB3K,UAAU,OAAM3C,UAEhBF,EAAAA,EAAAA,KAACZ,EAAAA,EAAM,CACL4O,YAAY,eACZ5N,MAAO8G,GACPwG,SAAWlB,IACTrF,GAAYqF,EAAE,EACdtM,SAEDoG,GAAMoD,KAAI,CAACpB,EAAQ4F,KACXlO,EAAAA,EAAAA,KAACb,EAAM,CAACiB,MAAOkI,EAAE6F,GAAGjO,SAAEoI,EAAEpB,kBAIrClH,EAAAA,EAAAA,KAACsN,EAAAA,EAAG,CACFJ,GAAI,CAACK,KAAM,IACXF,GAAI,CAACE,KAAM,EAAGC,OAAQ,GACtBJ,GAAI,CAACG,KAAM,EAAGC,OAAQ,GACtB3K,UAAU,OAAM3C,UAEhBF,EAAAA,EAAAA,KAACZ,EAAAA,EAAM,CACL4O,YAAY,eACZ5N,MAAOgH,GACPsG,SAAWlB,IACTnF,GAAamF,EAAE,EACftM,SAEDsG,GAAOkD,KAAI,CAACpB,EAAQ8F,KACZpO,EAAAA,EAAAA,KAACb,EAAM,CAACiB,MAAOkI,EAAE6F,GAAGjO,SAAEoI,EAAEpB,oBAK5B,iBAAT3H,GAA2C,kBAAf0E,GAC9BjE,EAAAA,EAAAA,KAACsN,EAAAA,EAAG,CACFJ,GAAI,CAACK,KAAM,IACXF,GAAI,CAACE,KAAM,EAAGC,OAAQ,GACtBJ,GAAI,CAACG,KAAM,EAAGC,OAAQ,GACtB3K,UAAU,OAAM3C,UAEhBF,EAAAA,EAAAA,KAACZ,EAAAA,EAAM,CACL4O,YAAY,eACZ5N,MAAOgH,GACPsG,SAAWlB,IACTnF,GAAamF,EAAE,EACftM,SAEDsG,GAAOkD,KAAI,CAACpB,EAAQ+F,KACZrO,EAAAA,EAAAA,KAACb,EAAM,CAACiB,MAAOkI,EAAE6F,GAAGjO,SAAEoI,EAAEpB,kBAKrClH,EAAAA,EAAAA,KAACsN,EAAAA,EAAG,CACFJ,GAAI,CAACK,KAAM,IACXF,GAAI,CAACE,KAAM,EAAGC,OAAQ,GACtBJ,GAAI,CAACG,KAAM,EAAGC,OAAQ,GACtB3K,UAAU,OAAM3C,UAEhBF,EAAAA,EAAAA,KAACZ,EAAAA,EAAM,CACL4O,YAAY,eACZ5N,MAAO8G,GACPwG,SAAWlB,IACTrF,GAAYqF,EAAE,EACdtM,SAEDoG,GAAMoD,KAAI,CAACpB,EAAQ+F,KACXrO,EAAAA,EAAAA,KAACb,EAAM,CAACiB,MAAOkI,EAAE6F,GAAGjO,SAAEoI,EAAEpB,kBAKvClH,EAAAA,EAAAA,KAACsN,EAAAA,EAAG,CACFJ,GAAI,CAACK,KAAM,IACXF,GAAI,CAACE,KAAM,EAAGC,OAAQ,GACtBJ,GAAI,CAACG,KAAM,EAAGC,OAAQ,GACtBL,GAAI,CAACI,KAAM,EAAGC,OAAQ,GACtB3K,UAAU,OAAM3C,UAEhBF,EAAAA,EAAAA,KAAA,UAAQ6C,UAAU,0BAA0BkL,KAAK,SAAQ7N,SAAC,cAI5DF,EAAAA,EAAAA,KAACsN,EAAAA,EAAG,CACFJ,GAAI,CAACK,KAAM,IACXF,GAAI,CAACE,KAAM,EAAGC,OAAQ,GACtBJ,GAAI,CAACG,KAAM,EAAGC,OAAQ,GACtBL,GAAI,CAACI,KAAM,EAAGC,OAAQ,GACtB3K,UAAU,OAAM3C,UAEhBF,EAAAA,EAAAA,KAAA,UACE6C,UAAU,yBACVkL,KAAK,QACLhL,QArMhBuL,KAEZvH,GAAe,CACbC,QAAS,GACTC,KAAM,KAGRN,GAAY,MACZE,GAAU,MACVU,IAAa,GACM,kBAAftD,GACFkD,GAAY,MACZE,GAAa,MAEba,GAAcpC,GAAOI,IACrBP,GAAW,KAEXwB,GAAY,MACZE,GAAa,MACbc,GAAanC,GAAQI,IACrBP,GAAY,GACd,EAgL2C3F,SAChB,aAIHF,EAAAA,EAAAA,KAACsN,EAAAA,EAAG,CACFJ,GAAI,CAACK,KAAM,EAAGC,OAAQ,GACtBH,GAAI,CAACE,KAAM,EAAGC,OAAQ,GACtBJ,GAAI,CAACG,KAAM,EAAGC,OAAQ,GACtBL,GAAI,CAACI,KAAM,EAAGC,OAAQ,eAOhCxN,EAAAA,EAAAA,KAAA,OAAK6C,UAAU,iBAAgB3C,UAma7BF,EAAAA,EAAAA,KAACuO,EAAAA,EAAI,CACvBC,iBAAiB,IACjBd,SAAWlB,IACTtI,EAAesI,EAAE,EAGnBiC,MAAOrC,GAAS1C,KAAI,CAAC8C,EAAGkC,KACXC,OAAOD,EAAI,GACtB,MAAO,CACLE,MAAOpC,EACPnE,IAAKmE,EACLtM,UAASiL,EAAAA,EAAAA,MAAA5B,EAAAA,SAAA,CAAArJ,SAAA,EAAEF,EAAAA,EAAAA,KAAA,OAAK6C,UAAU,OAAM3C,SAAK,GAAHwO,EAAK,8CAA8C,wCAA4C,KAAC1O,EAAAA,EAAAA,KAAC6O,EAAAA,EAAK,CACvIzG,QAAY,GAAHsG,EAAKzD,GAAS7C,GACvB0G,WAAe,GAAHJ,EAAK7K,EAAeE,EAC/BgL,YAAY,EACdC,OAAQ,CACNC,EAAG,OACHC,EAAG,SAEL/L,QAASA,EACT6I,WAAYA,KAgBV,IAAe,kBAAb/H,GAIJkH,EAAAA,EAAAA,MAAA5B,EAAAA,SAAA,CAAArJ,SAAA,CAAE,MAAEF,EAAAA,EAAAA,KAACmP,EAAAA,EAAU,CACXC,MAAO7J,GAGPrD,MAAO,CAACC,OAAQ,MAChBkN,eAAgB7H,GAChB8H,gBAAiB,GACjBjO,QAASmG,GAETkG,SAAWlB,IACT/E,GAAe+E,EAAE,EAGnB+C,kBAAkB,EAClBC,iBAAiB,QAEdrE,EAAAA,EAAAA,MAAA5B,EAAAA,SAAA,CAAArJ,SAAA,CAAE,MAAEF,EAAAA,EAAAA,KAACmP,EAAAA,EAAU,CAClBC,MAAO7J,GAGPrD,MAAO,CAACC,OAAQ,MAChBkN,eAAgB3H,GAChB4H,gBAAiB,GACjBjO,QAASqG,GAETgG,SAAWlB,IACT7E,GAAgB6E,EAAE,EAGpB+C,kBAAkB,EAClBC,iBAAiB,UAMtB,oBAWGxP,EAAAA,EAAAA,KAAA,OAAK6C,UAAU,aAAasL,GAAG,KAAK,cAAY,OAAMjO,UACpDF,EAAAA,EAAAA,KAAA,OAAK6C,UAAU,wBAAuB3C,UACpCiL,EAAAA,EAAAA,MAAA,OAAKtI,UAAU,gBAAe3C,SAAA,EAC5BF,EAAAA,EAAAA,KAAA,OAAK6C,UAAU,iDAAgD3C,UAC7DF,EAAAA,EAAAA,KAAA,OACE6C,UAAU,+CACV,kBAAgB,QAAO3C,UAEvBF,EAAAA,EAAAA,KAACyP,EAAAA,GAAK,CAACC,KAAK,yCAAyC7M,UAAU,oBAInEsI,EAAAA,EAAAA,MAAA,OAAKtI,UAAU,+CAA8C3C,SAAA,EAC3DF,EAAAA,EAAAA,KAAA,OAAK6C,UAAU,oBAAmB3C,UAChCF,EAAAA,EAAAA,KAAA,MAAI6C,UAAU,OAAM3C,SAAC,sBAEvBiL,EAAAA,EAAAA,MAAA,QAAMtI,UAAU,OAAM3C,SAAA,EACpBiL,EAAAA,EAAAA,MAAA,OAAKtI,UAAU,eAAc3C,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,SAAO6C,UAAU,gDAA+C3C,SAAC,gBAGjEF,EAAAA,EAAAA,KAAA,SACE+N,KAAK,QACLlL,UAAU,kCACVmL,YAAY,SAIhB7C,EAAAA,EAAAA,MAAA,OAAKtI,UAAU,eAAc3C,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,SAAO6C,UAAU,gDAA+C3C,SAAC,aAGjEF,EAAAA,EAAAA,KAAA,SACE+N,KAAK,QACLlL,UAAU,kCACVmL,YAAY,SAIhBhO,EAAAA,EAAAA,KAAA,UACE+N,KAAK,SACLI,GAAG,oBACHtL,UAAU,mCAAkC3C,UAE5CF,EAAAA,EAAAA,KAAA,QAAM6C,UAAU,kBAAiB3C,SAAC,8BAWxD,G","sources":["app/pages/mainPages/TaskList.tsx"],"sourcesContent":["/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, {useEffect, useState, useRef, useContext} from 'react'\nimport {Link, withRouter} from 'react-router-dom'\nimport {KTSVG} from '../../../_metronic/helpers'\nimport {message, Skeleton, Row, Col, Select, Pagination, DatePicker,Tabs,Table,Form,\n  InputRef,\n  Input,} from 'antd'\nimport type {FormInstance} from 'antd/es/form'\n\nimport moment from 'moment'\nimport {mainConfig} from '../../../config/mainConfig'\n\nconst Option = Select.Option\nconst EditableContext = React.createContext<FormInstance<any> | null>(null)\n\nlet roles = '',\n  token = '';\n \n  interface Item {\n    key: string\n    name: string\n    age: string\n    address: string\n  }\n  \n  interface EditableRowProps {\n    index: number\n  }\n  \n  const EditableRow: React.FC<EditableRowProps> = ({index, ...props}) => {\n    const [form] = Form.useForm()\n    return (\n      <Form form={form} component={false}>\n        <EditableContext.Provider value={form}>\n          <tr {...props} />\n        </EditableContext.Provider>\n      </Form>\n    )\n  }\n  \n  interface EditableCellProps {\n    title: React.ReactNode\n    editable: boolean\n    children: React.ReactNode\n    dataIndex: keyof Item\n    record: Item\n    handleSave: (record: Item) => void\n  }\n  \n  const EditableCell: React.FC<EditableCellProps> = ({\n    title,\n    editable,\n    children,\n    dataIndex,\n    record,\n    handleSave,\n    ...restProps\n  }) => {\n    const [editing, setEditing] = useState(false)\n    const inputRef = useRef<InputRef>(null)\n    const form = useContext(EditableContext)!\n  \n    useEffect(() => {\n      if (editing) {\n        inputRef.current?.focus()\n      }\n    }, [editing])\n  \n    const toggleEdit = () => {\n      setEditing(!editing)\n      form.setFieldsValue({[dataIndex]: record[dataIndex]})\n    }\n  \n    const save = async () => {\n      try {\n        const values = await form.validateFields()\n  \n        toggleEdit()\n        handleSave({...record, ...values})\n      } catch (errInfo) {\n        console.log('Save failed:', errInfo)\n      }\n    }\n  \n    let childNode = children\n  \n    if (editable) {\n      childNode = editing ? (\n        <Form.Item\n          style={{margin: 0}}\n          name={dataIndex}\n          rules={[\n            {\n              required: true,\n              message: `${title} is required.`,\n            },\n          ]}\n        >\n          <Input ref={inputRef} onPressEnter={save} onBlur={save} />\n        </Form.Item>\n      ) : (\n        <div className='editable-cell-value-wrap' style={{paddingRight: 24}} onClick={toggleEdit}>\n          {children}\n        </div>\n      )\n    }\n  \n    return <td {...restProps}>{childNode}</td>\n  }\n  \n  type EditableTableProps = Parameters<typeof Table>[0]\n  \n  interface DataType {\n    key: React.Key\n    name: string\n    age: string\n    address: string\n    task_id: any\n    task: any\n  }\n  \n  type ColumnTypes = Exclude<EditableTableProps['columns'], undefined>\nconst {RangePicker} = DatePicker\nfunction TaskListWrapper(props: any) {\n  const [loading, setloading] = useState<any>(false)\n  const [actionTaken,setActionTaken]=useState<any>(1)\n  const [data,setData]=useState<any>([])\n  const [maindata_to_me, setmaindata_To_Me] = useState<any[]>([])\n  const [maindata_by_me, setmaindata_By_Me] = useState<any[]>([])\n  const [assigned_to_me, setAssigned_to_me] = useState<any[]>([])\n  const [assigned_by_me, setAssigned_by_me] = useState<any[]>([])\n  const [tabSelected, settabSelected] = useState<any>('Assigned_to_me')\n  const [AssignedToSort, setAssignedToSort] = useState<any>('Asc')\n  const [AssignedBySort, setAssignBySort] = useState<any>('Asc')\n  const [CreatedOnSort, setCreatedOnSort] = useState<any>('Asc')\n\n  const [StatusSort, setStatusSort] = useState<any>('Asc')\n  const [CompeleSort, setCompleteSort] = useState<any>('Asc')\n  const [AssignedToTC, setAssignedToTC] = useState<any>('AT')\n\n  const [AssignedByTC, setAssignedByTC] = useState<any>('BY')\n  const [CreatedOn, setCreatedOn] = useState<any>('CO')\n  const [Status, setStatus] = useState<any>('Status')\n  const [completedOn, setcompletedOn] = useState<any>('Complete')\n\n  const [row_count, setrow_count] = useState<any>(1)\n  const [row_count2, setrow_count2] = useState<any>(1)\n  const [current, setCurrent] = useState(1)\n  const [current2, setCurrent2] = useState(1)\n  const [count, setCount] = useState(1)\n  const [count2, setCount2] = useState(1)\n  const [sortflag, setSortflag] = useState(0)\n  const [sortflag2, setSortflag2] = useState(0)\n  const [users, setUsers] = useState<any[]>([])\n  const [users2, setUsers2] = useState<any[]>([])\n\n  const [fromDate, setfromDate] = useState<any>(null)\n  const [toDate, settoDate] = useState<any>(null)\n  const [contactInfo, setContactInfo] = useState<any>({\n    keyword: '',\n    user: '',\n  })\n  const [username, setusername] = useState<any>(null)\n  const [username2, setusername2] = useState<any>(null)\n\n  const [paginflag, setpaginflag] = useState<any>(true);\n  const [currentPage,setCurrentPage]=useState<any>(1);\n  const [currentPage1,setCurrentPage1]=useState<any>(1);\n\n  const [sorter, setsorter] = useState<any>({\n    columnKey: 'ac4',\n    order: 'ascend',\n  })\n  const [sorter2, setsorter2] = useState<any>({\n    columnKey: 'ac4',\n    order: 'ascend',\n  })\n\n  useEffect(() => {\n    setloading(true)\n    // if(tabSelected==\"Assigned_to_me\")\n    //   {\n        getTasksforme(currentPage, sortflag)\n       \n      // }\n      // else{\n        getTasksbyme(currentPage1, sortflag2)\n      // }\n   \n    // settabSelected('Assigned_to_me')\n  }, [tabSelected,currentPage,current]);\n  const defaultColumns: (ColumnTypes[number] & {editable?: boolean; dataIndex: string})[] = [\n    {\n    title: 'Agg Code',\n    dataIndex: 'ac4',\n    key: 'ac4',\n    // sorter: true,\n    sorter: (a:any, b:any) => {return a.ac4.localeCompare(b.ac4)},\n    render: (item: any, record: any) => {\n        \n        \n      return (\n        \n          <Link\n         \n            to={{\n              pathname: '/product',\n\n              state: {prod_id: record.productpage_id, data: record},\n            }}\n          >\n            {item}\n          </Link>\n       \n      )\n    },\n  },\n  {\n    title: 'Task',\n    dataIndex: 'task',\n    key: 'task',\n    editable:true,\n    sorter: (a:any, b:any) => {return a.task.localeCompare(b.task)},\n    render:(item:any,record:any)=>{\n      return <Input value={item} />\n    }\n  },\n  \n  {\n    title: 'Assigned To',\n    dataIndex: 'assigned_to',\n    key: 'assigned_to',\n    sorter: (a:any, b:any) => {return a.assigned_to.localeCompare(b.assigned_to)},\n  },\n  {\n    title: 'Created On',\n    dataIndex: 'created_on',\n    key: 'created_on',\n    sorter: (a:any, b:any) => {return a.created_on.localeCompare(b.created_on)},\n    render: (item: string) => {\n      if (!item) return <>-</>\n      return moment(item).format('DD-MMM-YYYY')\n    },\n    \n  },\n  {\n    title: 'Status',\n    dataIndex: 'status',\n    key: 'status',\n    sorter: (a:any, b:any) => {return a.status.localeCompare(b.status)},\n    render: (item: string,record:any) => {\n     \n      if (!item) return <>-</>\n      return item == 'Pending' ? (\n        <button\n          className='btn btn-text btn-color-light btn-bg-warning fw-bold btn-sm me-1 min-w-100px'\n          // title='Mark Task as Completed'\n          // onClick={() => TaskAction(record)}\n          style={{cursor:\"text\"}}\n        >\n          {item}\n        </button>\n      ) : (\n        <button\n          className='btn btn-text btn-color-light btn-bg-success fw-bold btn-sm me-1 min-w-100px'\n          // title='Revert To Pending'\n          // onClick={() => TaskAction1(record)}\n          style={{cursor:\"text\"}}\n        >\n          {item}\n        </button>\n      )\n    },\n    \n  },\n]\nconst columns = defaultColumns.map((col) => {\n  if (!col.editable) {\n    return col\n  }\n  return {\n    ...col,\n    onCell: (record: DataType) => ({\n      record,\n      editable: col.editable,\n      dataIndex: col.dataIndex,\n      title: col.title,\n      handleSave,\n    }),\n  }\n})\nconst handleSave = (row: DataType) => {\n \n  let payload = {\n    content: row.task,\n  }\n  try {\n    fetch(`${mainConfig.MAIN_ENDPOINT}/api/update-task-comment/${row.task_id}`, {\n      method: 'put',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(payload),\n    })\n      .then(function (response) {\n        if (response.status != 200) {\n          return\n        }\n\n        response.json().then(function (data) {\n          message.success(data.message)\n          getTasksbyme(currentPage1, sortflag2)\n          // getData()\n        })\n      })\n      .catch(function (err) {})\n  } catch (err) {\n    console.log('ERR>>>', err)\n  }\n}\n  const columns1=[{\n    title: 'Agg Code',\n    dataIndex: 'ac4',\n    key: 'ac4',\n    sorter: (a:any, b:any) => {return a.ac4.localeCompare(b.ac4)},\n    render: (item: any, record: any) => {\n        \n        \n      return (\n        \n          <Link\n         \n            to={{\n              pathname: '/product',\n\n              state: {prod_id: record.productpage_id, data: record},\n            }}\n          >\n            {item}\n          </Link>\n       \n      )\n    },\n   \n  },\n  {\n    title: 'Task',\n    dataIndex: 'task',\n    key: 'task',\n    sorter: (a:any, b:any) => {return a.task.localeCompare(b.task)},\n  },\n  {\n    title: 'Assigned By',\n    dataIndex: 'assigned_by',\n    key: 'assigned_by',\n    sorter: (a:any, b:any) => {return a.assigned_by.localeCompare(b.assigned_by)},\n    editable: true,\n  },\n  {\n    title: 'Assigned To',\n    dataIndex: 'assigned_to',\n    key: 'assigned_to',\n    sorter: (a:any, b:any) => {return a.assigned_to.localeCompare(b.assigned_to)},\n  },\n  {\n    title: 'Created On',\n    dataIndex: 'created_on',\n    key: 'created_on',\n    sorter: (a:any, b:any) => {return a.created_on.localeCompare(b.created_on)},\n    render: (item: string) => {\n      if (!item) return <>-</>\n      return moment(item).format('DD-MMM-YYYY')\n    },\n    \n  },\n  {\n    title: 'Status',\n    dataIndex: 'status',\n    key: 'status',\n    sorter: (a:any, b:any) => {return a.status.localeCompare(b.status)},\n    render: (item: string,record:any) => {\n      if (!item) return <>-</>\n      return item == 'Pending' ? (\n       <> <button\n          className='btn btn-text btn-color-light btn-bg-warning fw-bold btn-sm me-1 min-w-100px'\n          title='Mark Task as Completed'\n          onClick={() => TaskAction(record)}\n        >\n          {item}\n        </button>\n        </>\n      ) : (\n        <button\n          className='btn btn-text btn-color-light btn-bg-success fw-bold btn-sm me-1 min-w-100px'\n          title='Revert To Pending'\n          onClick={() => TaskAction1(record)}\n        >\n          {item}\n        </button>\n      )\n    },\n    \n  },\n]\n\n  const getTasksforme = (count: any, sortflag: any) => {\n    try {\n      fetch(`${mainConfig.MAIN_ENDPOINT}/api/get-tasks-to-me/${count}/${sortflag}`, {\n        method: 'get',\n        headers: {\n          Authorization: `Bearer ${token}`,\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n      })\n        .then(function (response) {\n          if (response.status != 200) {\n            localStorage.clear()\n            window.location.reload()\n          }\n\n          response.json().then(function (data) {\n            setAssigned_to_me(data.data.assigned_to_me)\n            setmaindata_To_Me(data.data.assigned_to_me)\n            setUsers(data.data.users)\n            setrow_count(data.data.assigned_to_me_count)\n            setloading(false)\n          })\n        })\n        .catch(function (err) {\n          setloading(false)\n        })\n    } catch (err) {}\n  }\n\n  const getTasksbyme = (count2: any, sortflag2: any) => {\n    try {\n      fetch(`${mainConfig.MAIN_ENDPOINT}/api/get-tasks-by-me/${count2}/${sortflag2}`, {\n        method: 'get',\n        headers: {\n          Authorization: `Bearer ${token}`,\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n      })\n        .then(function (response) {\n          if (response.status != 200) {\n            return\n          }\n\n          response.json().then(function (data) {\n            \n            setAssigned_by_me(data.data.assigned_by_me)\n            setmaindata_By_Me(data.data.assigned_by_me)\n            setUsers2(data.data.users)\n\n            setrow_count2(data.data.assigned_by_me_count)\n\n            setloading(false)\n          })\n        })\n        .catch(function (err) {\n          setloading(false)\n        })\n    } catch (err) {}\n  }\n\n  const TaskAction = (data: any) => {\n\n    const po = {\n      product_id: `${data.product_id}`,\n      user_id: `${data.user_id}`,\n      status: '1',\n    }\n    try {\n      fetch(`${mainConfig.MAIN_ENDPOINT}/api/update-task/${data.task_id}`, {\n        method: 'put',\n        headers: {\n          Authorization: `Bearer ${token}`,\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(po),\n      })\n        .then(function (response) {\n          if (response.status != 200) {\n            return\n          }\n\n          response.json().then(function (data) {\n            if (data.success == true) {\n              message.success(data.message)\n              // if (tabSelected == 'Assigned_to_me') {\n                setCount(current)\n                setCurrent(current)\n                setCurrentPage(current)\n                setCurrentPage1(current)\n\n                \n                getTasksforme(current, sortflag)\n                getTasksbyme(currentPage1, sortflag2)\n              // }\n            }\n          })\n        })\n        .catch(function (err) {})\n    } catch (err) {\n      console.log('ERR>>>', err)\n    }\n  }\n\n  const TaskAction1 = (data: any) => {\n    // console.log(\"TaskAction1\",data)\n    // return\n    const po = {\n      product_id: `${data.product_id}`,\n      user_id: `${data.user_id}`,\n      status: '0',\n    }\n    try {\n      fetch(`${mainConfig.MAIN_ENDPOINT}/api/update-task/${data.task_id}`, {\n        method: 'put',\n        headers: {\n          Authorization: `Bearer ${token}`,\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(po),\n      })\n        .then(function (response) {\n          if (response.status != 200) {\n            return\n          }\n\n          response.json().then(function (data) {\n            if (data.success == true) {\n              message.success(data.message)\n\n              // if (tabSelected != 'Assigned_to_me') {\n                setCount(current)\n                setCurrent(current)\n                getTasksforme(current, sortflag)\n                getTasksbyme(currentPage1, sortflag2)\n              // }\n            }\n          })\n        })\n        .catch(function (err) {\n          console.log('Fetch Error :-S', err)\n        })\n    } catch (err) {\n      console.log('ERR>>>', err)\n    }\n  }\n\n  const handleTableChange = (page: any) => {\n    let total = row_count\n\n    setCurrent(page)\n\n    getTasksforme(page, sortflag)\n  }\n  const handleTableChange2 = (page: any) => {\n    let total = row_count2\n\n    setCurrent2(page)\n\n    getTasksbyme(page, sortflag)\n  }\n\n  const onSortTableAssignedTo = (data: any) => {\n    let tempUsage\n    tabSelected == 'Assigned_to_me' ? (tempUsage = assigned_to_me) : (tempUsage = assigned_by_me)\n\n    if (data == 'AT') {\n      if (AssignedToSort == 'Asc') {\n        setAssignedToSort('Desc')\n        let tempArr = tempUsage.sort((a: any, b: any) => {\n          let fa = a.assigned_to.toLowerCase(),\n            fb = b.assigned_to.toLowerCase()\n\n          if (fa < fb) {\n            return -1\n          }\n          if (fa > fb) {\n            return 1\n          }\n          return 0\n        })\n        tabSelected == 'Assigned_to_me' ? setAssigned_to_me(tempArr) : setAssigned_by_me(tempArr)\n      }\n\n      if (AssignedToSort == 'Desc') {\n        setAssignedToSort('Asc')\n        let tempArr = tempUsage.sort((a: any, b: any) => {\n          let fa = b.assigned_to.toLowerCase(),\n            fb = a.assigned_to.toLowerCase()\n\n          if (fa < fb) {\n            return -1\n          }\n          if (fa > fb) {\n            return 1\n          }\n          return 0\n        })\n\n        tabSelected == 'Assigned_to_me' ? setAssigned_to_me(tempArr) : setAssigned_by_me(tempArr)\n      }\n    }\n    if (data == 'BY') {\n      if (AssignedBySort == 'Asc') {\n        setAssignBySort('Desc')\n        let tempArr = tempUsage.sort((a: any, b: any) => {\n          let fa = a.assigned_by.toLowerCase(),\n            fb = b.assigned_by.toLowerCase()\n\n          if (fa < fb) {\n            return -1\n          }\n          if (fa > fb) {\n            return 1\n          }\n          return 0\n        })\n\n        tabSelected == 'Assigned_to_me' ? setAssigned_to_me(tempArr) : setAssigned_by_me(tempArr)\n      }\n\n      if (AssignedBySort == 'Desc') {\n        setAssignBySort('Asc')\n\n        let tempArr = tempUsage.sort((a: any, b: any) => {\n          let fa = a.assigned_by.toLowerCase(),\n            fb = b.assigned_by.toLowerCase()\n\n          if (fa < fb) {\n            return -1\n          }\n          if (fa > fb) {\n            return 1\n          }\n          return 0\n        })\n\n        tabSelected == 'Assigned_to_me' ? setAssigned_to_me(tempArr) : setAssigned_by_me(tempArr)\n      }\n    }\n\n    if (data == 'CO') {\n      if (CreatedOnSort == 'Asc') {\n        setCreatedOnSort('Desc')\n\n        let tempArr = tempUsage.sort((a: any, b: any) =>\n          a.created_on > b.created_on ? 1 : b.created_on > a.created_on ? -1 : 0\n        )\n\n        tabSelected == 'Assigned_to_me' ? setAssigned_to_me(tempArr) : setAssigned_by_me(tempArr)\n      }\n\n      if (CreatedOnSort == 'Desc') {\n        setCreatedOnSort('Asc')\n\n        let tempArr = tempUsage.sort((a: any, b: any) =>\n          b.created_on > a.created_on ? 1 : a.created_on > b.created_on ? -1 : 0\n        )\n\n        tabSelected == 'Assigned_to_me' ? setAssigned_to_me(tempArr) : setAssigned_by_me(tempArr)\n      }\n    }\n\n    if (data == 'Status') {\n      if (StatusSort == 'Asc') {\n        setStatusSort('Desc')\n\n        let tempArr = tempUsage.sort((a: any, b: any) =>\n          a.status > b.status ? 1 : b.status > a.status ? -1 : 0\n        )\n\n        tabSelected == 'Assigned_to_me' ? setAssigned_to_me(tempArr) : setAssigned_by_me(tempArr)\n      }\n\n      if (StatusSort == 'Desc') {\n        setStatusSort('Asc')\n\n        let tempArr = tempUsage.sort((a: any, b: any) =>\n          b.status > a.status ? 1 : a.status > b.status ? -1 : 0\n        )\n\n        tabSelected == 'Assigned_to_me' ? setAssigned_to_me(tempArr) : setAssigned_by_me(tempArr)\n      }\n    }\n    if (data == 'Complete') {\n      if (CompeleSort == 'Asc') {\n        setCompleteSort('Desc')\n\n        let tempArr = tempUsage.sort((a: any, b: any) =>\n          a.completed_on > b.completed_on ? 1 : b.completed_on > a.completed_on ? -1 : 0\n        )\n\n        tabSelected == 'Assigned_to_me' ? setAssigned_to_me(tempArr) : setAssigned_by_me(tempArr)\n      }\n\n      if (CompeleSort == 'Desc') {\n        setCompleteSort('Asc')\n\n        let tempArr = tempUsage.sort((a: any, b: any) =>\n          b.completed_on > a.completed_on ? 1 : a.completed_on > b.completed_on ? -1 : 0\n        )\n\n        tabSelected == 'Assigned_to_me' ? setAssigned_to_me(tempArr) : setAssigned_by_me(tempArr)\n      }\n    }\n  }\n\n  const handleSubmit = (e: any) => {\n    setfromDate(null)\n    settoDate(null)\n\n    e.preventDefault()\n    let prodData1 = {\n      from_date: fromDate,\n      to_date: toDate,\n      task: contactInfo.keyword,\n      assigned_to: username,\n      assigned_by: username2,\n    }\n\n    try {\n      if (tabSelected == 'Assigned_to_me') {\n        fetch(`${mainConfig.MAIN_ENDPOINT}/api/search-tasks-to-me`, {\n          method: 'post',\n          headers: {\n            Authorization: `Bearer ${token}`,\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(prodData1),\n        })\n          .then(function (response) {\n            if (response.status != 200) {\n              return\n            }\n\n            response.json().then(function (data) {\n              setloading(false)\n\n              setAssigned_to_me(data.data.tasks_assigned_to_me)\n              setpaginflag(false)\n\n              setloading(false)\n            })\n          })\n          .catch(function (err) {\n            setloading(false)\n          })\n      } else {\n        fetch(`${mainConfig.MAIN_ENDPOINT}/api/search-tasks-by-me`, {\n          method: 'post',\n          headers: {\n            Authorization: `Bearer ${token}`,\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(prodData1),\n        })\n          .then(function (response) {\n            if (response.status != 200) {\n              return\n            }\n\n            response.json().then(function (data) {\n              setloading(false)\n\n              setAssigned_by_me(data.data.tasks_assigned_by_me)\n              setpaginflag(false)\n              setloading(false)\n            })\n          })\n          .catch(function (err) {\n            setloading(false)\n          })\n      }\n    } catch (err) {\n      console.log('ERR>>>', err)\n    }\n  }\n\n  const ondateSelect = (date: any) => {\n    if (date) {\n      let tempDate = moment(date[0]).format('YYYY-MM-DD')\n      let tempDate1 = moment(date[1]).format('YYYY-MM-DD')\n\n      setfromDate(tempDate)\n      settoDate(tempDate1)\n    } else {\n      if (tabSelected == 'Assigned_to_me') {\n        getTasksforme(count, sortflag)\n        setCurrent(1)\n        setpaginflag(true)\n      } else {\n        getTasksbyme(count, sortflag)\n        setCurrent2(1)\n        setpaginflag(true)\n      }\n    }\n  }\n  const reset = () => {\n   \n    setContactInfo({\n      keyword: '',\n      user: '',\n    })\n\n    setfromDate(null)\n    settoDate(null)\n    setpaginflag(true)\n    if (tabSelected == 'Assigned_to_me') {\n      setusername(null)\n      setusername2(null)\n      \n      getTasksforme(count, sortflag)\n      setCurrent(1)\n    } else {\n      setusername(null)\n      setusername2(null)\n      getTasksbyme(count2, sortflag2)\n      setCurrent2(1)\n    }\n  }\n  const components = {\n    body: {\n      row: EditableRow,\n      cell: EditableCell,\n    },\n  }\n  token = JSON.parse(localStorage.getItem('portalUserDataToken') || '');\n  roles = JSON.parse(localStorage.getItem('portalUserDataRole') || '');\n  const TabValue=roles == 'Administrator' ?[\"All Tasks\",\"Assigned by me\"]  : [\"Assigned to me\",\"Assigned by me\"];\n\n  return (\n    <React.Fragment>\n     \n        <React.Fragment>\n          <ol className='breadcrumb breadcrumb-dot fs-6 fw-bold' style={{margin: '1%'}}>\n            <Link to='/home' className='pe-1 cursor-pointer'>\n              <li className='breadcrumb-item pe-1'>Home</li>\n            </Link>\n            / &nbsp;<li className='breadcrumb-item pe-3'>Tasks List</li>\n          </ol>\n\n          <div className='row g-5 gx-xxl-8' style={{marginTop: '1%'}}>\n            <div className='col-xxl-12'>\n              <div className='card-xxl-stretch mb-5 mb-xxl-8'>\n                <div className='row gy-5 g-xl-4'>\n                  <div className={`card`}>\n                    <div className='card-header border-0 pt-2'>\n                      <h3 className='card-title align-items-start flex-column'>\n                        <span\n                          className='card-label fw-bolder fs-3 mb-1'\n                          style={{color: 'rgb(138, 38, 80)'}}\n                        >\n                          Tasks List\n                        </span>\n                      </h3>\n                    </div>\n                    <div className='card-header border-0 pt-2 d-none d-sm-none d-md-block'>\n                      <h3 className='card-title align-items-start flex-column'>\n                        <form onSubmit={handleSubmit}>\n                          <Row justify='space-around' gutter={{xs: 8, sm: 16, md: 24, lg: 32}}>\n                            <Col\n                              xs={{span: 12}}\n                              lg={{span: 5, offset: 0}}\n                              md={{span: 4, offset: 1}}\n                              className='mb-4'\n                            >\n                             {\n                            <RangePicker\n                              defaultValue={[fromDate, toDate]}\n                              onChange={(date) =>{ ondateSelect(date)}}\n                            \n                            />\n                             } \n                            </Col>\n                            <Col\n                              xs={{span: 12}}\n                              lg={{span: 4, offset: 1}}\n                              md={{span: 4, offset: 1}}\n                              className='mb-4'\n                            >\n                              <input\n                                type='text'\n                                className='form-control form-control-solid'\n                                placeholder={'Filter by Keyword '}\n                                name='keyword'\n                                value={contactInfo.keyword}\n                                onChange={(e) => {\n                                  setContactInfo({\n                                    ...contactInfo,\n                                    [e.target.name]: e.target.value,\n                                  })\n                                }}\n                              />\n                            </Col>\n\n                            {roles == 'Administrator' ? (\n                              <>\n                                <Col\n                                  xs={{span: 24}}\n                                  lg={{span: 3, offset: 1}}\n                                  md={{span: 3, offset: 1}}\n                                  className='mb-4'\n                                >\n                                  <Select\n                                    placeholder='Assigned to '\n                                    value={username}\n                                    onChange={(e) => {\n                                      setusername(e)\n                                    }}\n                                  >\n                                    {users.map((a: any, z: any) => {\n                                      return <Option value={a.id}>{a.username}</Option>\n                                    })}\n                                  </Select>\n                                </Col>\n                                <Col\n                                  xs={{span: 24}}\n                                  lg={{span: 3, offset: 1}}\n                                  md={{span: 3, offset: 1}}\n                                  className='mb-4'\n                                >\n                                  <Select\n                                    placeholder='Assigned by '\n                                    value={username2}\n                                    onChange={(e) => {\n                                      setusername2(e)\n                                    }}\n                                  >\n                                    {users2.map((a: any, d: any) => {\n                                      return <Option value={a.id}>{a.username}</Option>\n                                    })}\n                                  </Select>\n                                </Col>\n                              </>\n                            ) : roles != 'Administrator' && tabSelected == 'Assigned_to_me' ? (\n                              <Col\n                                xs={{span: 24}}\n                                lg={{span: 3, offset: 1}}\n                                md={{span: 3, offset: 1}}\n                                className='mb-4'\n                              >\n                                <Select\n                                  placeholder='Assigned by '\n                                  value={username2}\n                                  onChange={(e) => {\n                                    setusername2(e)\n                                  }}\n                                >\n                                  {users2.map((a: any, u: any) => {\n                                    return <Option value={a.id}>{a.username}</Option>\n                                  })}\n                                </Select>\n                              </Col>\n                            ) : (\n                              <Col\n                                xs={{span: 24}}\n                                lg={{span: 3, offset: 1}}\n                                md={{span: 3, offset: 1}}\n                                className='mb-4'\n                              >\n                                <Select\n                                  placeholder='Assigned to '\n                                  value={username}\n                                  onChange={(e) => {\n                                    setusername(e)\n                                  }}\n                                >\n                                  {users.map((a: any, u: any) => {\n                                    return <Option value={a.id}>{a.username}</Option>\n                                  })}\n                                </Select>\n                              </Col>\n                            )}\n                            <Col\n                              xs={{span: 12}}\n                              lg={{span: 1, offset: 2}}\n                              md={{span: 1, offset: 1}}\n                              sm={{span: 1, offset: 1}}\n                              className='mb-4'\n                            >\n                              <button className='btn btn-sm btn-primary ' type='submit'>\n                                Submit\n                              </button>\n                            </Col>\n                            <Col\n                              xs={{span: 12}}\n                              lg={{span: 1, offset: 2}}\n                              md={{span: 1, offset: 1}}\n                              sm={{span: 1, offset: 1}}\n                              className='mb-4'\n                            >\n                              <button\n                                className='btn btn-sm btn-primary'\n                                type='reset'\n                                onClick={reset}\n                              >\n                                Reset\n                              </button>\n                            </Col>\n                            <Col\n                              xs={{span: 1, offset: 1}}\n                              lg={{span: 1, offset: 1}}\n                              md={{span: 1, offset: 1}}\n                              sm={{span: 1, offset: 1}}\n                            ></Col>\n                          </Row>\n                        </form>\n                      </h3>\n                    </div>\n\n                    <div className='card-body py-3'>\n                      {/* <div className='table-responsive h-700px table-scroll'>\n                        <ul className='nav nav-custom nav-tabs nav-line-tabs nav-line-tabs-2x border-0 fs-4 fw-bold mb-8 main-table'>\n                          <li className='nav-item'>\n                            <a\n                              className='nav-link text-active-primary pb-4 active'\n                              data-bs-toggle='tab'\n                              href='#Assigned_to_me'\n                              onClick={() => {\n                                settabSelected('Assigned_to_me')\n                                get sforme(count, sortflag)\n                                setCurrent2(1)\n                              }}\n                            >\n                              {roles == 'Administrator' ? 'All Tasks' : '  Assigned to me'}\n                            </a>\n                          </li>\n\n                          <li className='nav-item'>\n                            <a\n                              className='nav-link text-active-primary pb-4'\n                              data-kt-countup-tabs='true'\n                              data-bs-toggle='tab'\n                              href='#Assigned_by_me'\n                              onClick={() => {\n                                settabSelected('Assigned_by_me')\n                                getTasksbyme(count2, sortflag2)\n                                setCurrent2(1)\n                              }}\n                            >\n                              Assigned by me\n                            </a>\n                          </li>\n                        </ul>\n                        <div className='tab-content' id='myTabContent'>\n                          <div\n                            className='tab-pane fade show active '\n                            id='Assigned_to_me'\n                            role='tabpanel'\n                            onClick={() => settabSelected('Assigned_to_me')}\n                          >\n                            <h3 className='card-title align-items-start flex-column'>\n                              <span style={{fontWeight: 'normal'}}>\n                                {' '}\n                                <sub className={''} style={{color: 'black'}}>\n                                  (Task assign to all user`s with all status)\n                                </sub>\n                              </span>\n                            </h3>\n\n                            <table className='table table-row-dashed table-row-gray-300 align-middle gs-0 gy-4 main-table'>\n                              <thead>\n                                <tr className='fw-bolder text-muted'>\n                                  <th className='w-15px'> </th>\n                                  <th className='min-w-120px'>Aggregate Code</th>\n\n                                  <th className='min-w-120px'>Task</th>\n                                  <th\n                                    className=''\n                                    onClick={() => onSortTableAssignedTo(AssignedByTC)}\n                                  >\n                                    Assigned By\n                                    {AssignedBySort != 'Desc' ? (\n                                      <KTSVG\n                                        className='text-hover-primary cursor-pointer'\n                                        path={'/media/icons/duotune/arrows/arr062.svg'}\n                                      />\n                                    ) : (\n                                      <KTSVG\n                                        className='text-hover-primary cursor-pointer'\n                                        path={'/media/icons/duotune/arrows/arr068.svg'}\n                                      />\n                                    )}\n                                  </th>\n                                  <>\n                                  {roles == 'Administrator' && (\n                                    <th\n                                      className=''\n                                      onClick={() => onSortTableAssignedTo(AssignedToTC)}\n                                    >\n                                      Assigned To\n                                      {AssignedToSort != 'Desc' ? (\n                                        <KTSVG\n                                          className='text-hover-primary cursor-pointer'\n                                          path={'/media/icons/duotune/arrows/arr062.svg'}\n                                        />\n                                      ) : (\n                                        <KTSVG\n                                          className='text-hover-primary cursor-pointer'\n                                          path={'/media/icons/duotune/arrows/arr068.svg'}\n                                        />\n                                      )}\n                                    </th>\n                                  ) }\n</>\n                                  <th className='' onClick={() => onSortTableAssignedTo(CreatedOn)}>\n                                    Created On\n                                    {CreatedOnSort != 'Desc' ? (\n                                      <KTSVG\n                                        className='text-hover-primary cursor-pointer'\n                                        path={'/media/icons/duotune/arrows/arr062.svg'}\n                                      />\n                                    ) : (\n                                      <KTSVG\n                                        className='text-hover-primary cursor-pointer'\n                                        path={'/media/icons/duotune/arrows/arr068.svg'}\n                                      />\n                                    )}\n                                  </th>\n\n                                  <th\n                                    className='min-w-80px'\n                                    onClick={() => {\n                                      onSortTableAssignedTo(completedOn)\n                                    }}\n                                  >\n                                    Completed On\n                                    {CompeleSort != 'Desc' ? (\n                                      <KTSVG\n                                        className='text-hover-primary cursor-pointer'\n                                        path={'/media/icons/duotune/arrows/arr062.svg'}\n                                      />\n                                    ) : (\n                                      <KTSVG\n                                        className='text-hover-primary cursor-pointer'\n                                        path={'/media/icons/duotune/arrows/arr068.svg'}\n                                      />\n                                    )}\n                                  </th>\n                                  <th\n                                    className='min-w-110px'\n                                    onClick={() => onSortTableAssignedTo(Status)}\n                                  >\n                                    Status\n                                    {StatusSort != 'Desc' ? (\n                                      <KTSVG\n                                        className='text-hover-primary cursor-pointer'\n                                        path={'/media/icons/duotune/arrows/arr062.svg'}\n                                      />\n                                    ) : (\n                                      <KTSVG\n                                        className='text-hover-primary cursor-pointer'\n                                        path={'/media/icons/duotune/arrows/arr068.svg'}\n                                      />\n                                    )}\n                                  </th>\n                                </tr>\n                              </thead>\n\n                              <tbody>\n                                {assigned_to_me != undefined &&\n                                  assigned_to_me.map((j: any, o: any) => {\n                                    return (\n                                      <tr\n                                        style={{\n                                          background:\n                                            j.status == 0\n                                              ? '#fff595'\n                                              : j.status == 1\n                                              ? '#abb4ff'\n                                              : j.status == 2\n                                              ? '#ffabab'\n                                              : j.status == 3\n                                              ? '#cbffab'\n                                              : '#ffffff',\n                                        }}\n                                      >\n                                        <td></td>\n\n                                        <td>\n                                          <Link\n                                            to={{\n                                              pathname: '/product',\n                                              state: {prod_id: j.product_id},\n                                            }}\n                                          >\n                                            <span className='text-danger fw-bolder text-hover-primary d-block fs-6 cursor-pointer text-decoration-underline link'>\n                                              {j.ac4}\n                                            </span>\n                                          </Link>\n                                        </td>\n\n                                        <td>\n                                          <span className='text-dark fw-bolder text-hover-primary d-block fs-6'>\n                                            {j.task}\n                                          </span>\n                                        </td>\n\n                                        <td>\n                                          <span className='text-dark fw-bolder text-hover-primary d-block fs-6'>\n                                            {j.assigned_by}\n                                          </span>\n                                        </td>\n\n                                        {roles == 'Administrator' ? (\n                                          <td>\n                                            <span className='text-dark fw-bolder text-hover-primary d-block fs-6'>\n                                              {j.assigned_to}\n                                            </span>\n                                          </td>\n                                        ) : (\n                                          <></>\n                                        )}\n\n                                        <td>\n                                          <span className='text-dark fw-bolder text-hover-primary d-block fs-6'>\n                                            {moment(j.created_on).format('DD-MMM-YYYY')}\n                                          </span>\n                                        </td>\n\n                                        <td>\n                                          <span className='text-dark fw-bolder text-hover-primary d-block fs-6'>\n                                            {j.completed_on != null\n                                              ? moment(j.completed_on).format('DD-MMM-YYYY')\n                                              : '-'}\n                                          </span>\n                                        </td>\n\n                                        <td>\n                                          <div className='d-flex flex-shrink-0'>\n                                            {j.status == 'Pending' ? (\n                                              <button\n                                                className='btn btn-text btn-color-light btn-bg-warning fw-bold btn-sm me-1 min-w-100px'\n                                                title='Mark Task as Completed'\n                                                onClick={() => TaskAction(j)}\n                                              >\n                                                {j.status}\n                                              </button>\n                                            ) : (\n                                              <button\n                                                className='btn btn-text btn-color-light btn-bg-success fw-bold btn-sm me-1 min-w-100px'\n                                                title='Revert To Pending'\n                                                onClick={() => TaskAction1(j)}\n                                              >\n                                                {j.status}\n                                              </button>\n                                            )}\n                                          </div>\n                                        </td>\n                                      </tr>\n                                    )\n                                  })}\n                              </tbody>\n                            </table>\n                          </div>\n\n                          <div className='tab-pane fade ' id='Assigned_by_me' role='tabpanel'>\n                            <h3 className='card-title align-items-start flex-column'>\n                              <span style={{fontWeight: 'normal'}}>\n                                {' '}\n                                <sub className={''} style={{color: 'black'}}>\n                                  (Task assign by me with all status)\n                                </sub>\n                              </span>\n                            </h3>\n\n                            <table className='table table-row-dashed table-row-gray-300 align-middle gs-0 gy-4 main-table'>\n                              <thead>\n                                <tr className='fw-bolder text-muted'>\n                                  <th className='w-15px'></th>\n                                  <th className='min-w-120px'>Aggregate Code</th>\n\n                                  <th className='min-w-120px'>Task</th>\n\n                                  <th\n                                    className=''\n                                    onClick={() => onSortTableAssignedTo(AssignedToTC)}\n                                  >\n                                    Assigned To\n                                    {AssignedToSort != 'Desc' ? (\n                                      <KTSVG\n                                        className='text-hover-primary cursor-pointer'\n                                        path={'/media/icons/duotune/arrows/arr062.svg'}\n                                      />\n                                    ) : (\n                                      <KTSVG\n                                        className='text-hover-primary cursor-pointer'\n                                        path={'/media/icons/duotune/arrows/arr068.svg'}\n                                      />\n                                    )}\n                                  </th>\n\n                                  <th className='' onClick={() => onSortTableAssignedTo(CreatedOn)}>\n                                    Created On\n                                    {CreatedOnSort != 'Desc' ? (\n                                      <KTSVG\n                                        className='text-hover-primary cursor-pointer'\n                                        path={'/media/icons/duotune/arrows/arr062.svg'}\n                                      />\n                                    ) : (\n                                      <KTSVG\n                                        className='text-hover-primary cursor-pointer'\n                                        path={'/media/icons/duotune/arrows/arr068.svg'}\n                                      />\n                                    )}\n                                  </th>\n                                  <th\n                                    className='min-w-80px'\n                                    onClick={() => onSortTableAssignedTo(completedOn)}\n                                  >\n                                    Completed On\n                                    {CompeleSort != 'Desc' ? (\n                                      <KTSVG\n                                        className='text-hover-primary cursor-pointer'\n                                        path={'/media/icons/duotune/arrows/arr062.svg'}\n                                      />\n                                    ) : (\n                                      <KTSVG\n                                        className='text-hover-primary cursor-pointer'\n                                        path={'/media/icons/duotune/arrows/arr068.svg'}\n                                      />\n                                    )}\n                                  </th>\n                                  <th\n                                    className='min-w-110px'\n                                    onClick={() => onSortTableAssignedTo(Status)}\n                                  >\n                                    Status\n                                    {StatusSort != 'Desc' ? (\n                                      <KTSVG\n                                        className='text-hover-primary cursor-pointer'\n                                        path={'/media/icons/duotune/arrows/arr062.svg'}\n                                      />\n                                    ) : (\n                                      <KTSVG\n                                        className='text-hover-primary cursor-pointer'\n                                        path={'/media/icons/duotune/arrows/arr068.svg'}\n                                      />\n                                    )}\n                                  </th>\n                                </tr>\n                              </thead>\n\n                              <tbody>\n                                {assigned_by_me != undefined &&\n                                  assigned_by_me.map((k: any, f: any) => {\n                                    return (\n                                      <tr\n                                        style={{\n                                          background:\n                                            k.status == 0\n                                              ? '#fff595'\n                                              : k.status == 1\n                                              ? '#abb4ff'\n                                              : k.status == 2\n                                              ? '#ffabab'\n                                              : k.status == 3\n                                              ? '#cbffab'\n                                              : '#ffffff',\n                                        }}\n                                      >\n                                        <td></td>\n\n                                        <td>\n                                          <Link\n                                            to={{\n                                              pathname: '/product',\n                                              state: {prod_id: k.product_id},\n                                            }}\n                                          >\n                                            <span className='text-danger fw-bolder text-hover-primary d-block fs-6 cursor-pointer text-decoration-underline link'>\n                                              {k.ac4}\n                                            </span>\n                                          </Link>\n                                        </td>\n\n                                        <td>\n                                          <span className='text-dark fw-bolder text-hover-primary d-block fs-6'>\n                                            {k.task}\n                                          </span>\n                                        </td>\n                                        <td>\n                                          <span className='text-dark fw-bolder text-hover-primary d-block fs-6'>\n                                            {k.assigned_to}\n                                          </span>\n                                        </td>\n\n                                        <td>\n                                          <span className='text-dark fw-bolder text-hover-primary d-block fs-6'>\n                                            {moment(k.created_on).format('DD-MMM-YYYY')}\n                                          </span>\n                                        </td>\n\n                                        <td>\n                                          <span className='text-dark fw-bolder text-hover-primary d-block fs-6'>\n                                            {k.completed_on != null\n                                              ? moment(k.completed_on).format('DD-MMM-YYYY')\n                                              : '-'}\n                                          </span>\n                                        </td>\n\n                                        <td>\n                                          <div className='d-flex flex-shrink-0'>\n                                            {k.status == 'Pending' ? (\n                                              <span\n                                                style={{cursor: 'text'}}\n                                                className='btn btn-text btn-color-light btn-bg-warning fw-bold btn-sm me-1 min-w-100px'\n                                              >\n                                                {k.status}\n                                              </span>\n                                            ) : (\n                                              <span\n                                                style={{cursor: 'text'}}\n                                                className='btn btn-text btn-color-light btn-bg-success fw-bold btn-sm me-1 min-w-100px'\n                                              >\n                                                {k.status}\n                                              </span>\n                                            )}\n                                          </div>\n                                        </td>\n                                      </tr>\n                                    )\n                                  })}\n                              </tbody>\n                            </table>\n                          </div>\n                        </div>\n                      </div> */}\n                     \n                      <Tabs\n    defaultActiveKey=\"1\"\n    onChange={(e)=>{\n      settabSelected(e)\n    }}\n    \n    items={TabValue.map((e, i) => {\n      const id = String(i + 1);\n      return {\n        label: e,\n        key: e,\n        children:<><div className='mb-4'>{i==0?\"(Task assign to all user`s with all status)\":\"(Task assign by me with all status)\"}</div> <Table\n         columns={i==0?columns1:columns as ColumnTypes} \n         dataSource={i==0?assigned_to_me:assigned_by_me}\n          pagination={false} \n        scroll={{\n          x: 'auto',\n          y: '400px',\n        }}\n        loading={loading}\n        components={components}\n\n        // onChange={(val: any, filter: any, sorter: any, extra: any) => {\n        //  if(tabSelected==\"Assigned_to_me\")\n        //   {\n        //     setsorter({\n        //       ...sorter,\n        //     })\n        //   }\n        //   else{\n        //     setsorter2({\n        //       ...sorter,\n        //     })\n        //   }\n         \n        // }}\n        /> {tabSelected==\"Assigned_to_me\"?\n\n\n         \n        <>  <Pagination\n            total={row_count}\n          \n          \n            style={{margin: '2%'}}\n            defaultCurrent={currentPage}\n            defaultPageSize={10}\n            current={currentPage}\n          \n            onChange={(e) => {\n              setCurrentPage(e)\n             \n            }}\n            hideOnSinglePage={true}\n            showSizeChanger={false}\n          />\n          </>: <>  <Pagination\n            total={row_count}\n          \n          \n            style={{margin: '2%'}}\n            defaultCurrent={currentPage1}\n            defaultPageSize={10}\n            current={currentPage1}\n          \n            onChange={(e) => {\n              setCurrentPage1(e)\n             \n            }}\n            hideOnSinglePage={true}\n            showSizeChanger={false}\n          />\n          </>\n        \n         \n        }</>,\n      };\n    })}\n  />\n                      \n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className='modal fade' id='po' aria-hidden='true'>\n            <div className='modal-dialog mw-650px'>\n              <div className='modal-content'>\n                <div className='modal-header pb-0 border-0 justify-content-end'>\n                  <div\n                    className='btn btn-sm btn-icon btn-active-color-primary'\n                    data-bs-dismiss='modal'\n                  >\n                    <KTSVG path='/media/icons/duotune/arrows/arr061.svg' className='svg-icon-1' />\n                  </div>\n                </div>\n\n                <div className='modal-body scroll-y mx-5 mx-xl-18 pt-0 pb-15'>\n                  <div className='text-center mb-13'>\n                    <h1 className='mb-3'>Purchase Order</h1>\n                  </div>\n                  <form className='form'>\n                    <div className='fv-row mb-10'>\n                      <label className='form-label fs-6 fw-bolder text-dark text-left'>\n                        Quantity :\n                      </label>\n                      <input\n                        type='email'\n                        className='form-control form-control-solid'\n                        placeholder=''\n                      />\n                    </div>\n\n                    <div className='fv-row mb-10'>\n                      <label className='form-label fs-6 fw-bolder text-dark text-left'>\n                        Price :\n                      </label>\n                      <input\n                        type='email'\n                        className='form-control form-control-solid'\n                        placeholder=''\n                      />\n                    </div>\n\n                    <button\n                      type='submit'\n                      id='kt_sign_in_submit'\n                      className='btn btn-lg btn-primary w-40 mb-5'\n                    >\n                      <span className='indicator-label'>Submit</span>\n                    </button>\n                  </form>\n                </div>\n              </div>\n            </div>\n          </div>\n        </React.Fragment>\n     \n    </React.Fragment>\n  )\n}\n\nexport default withRouter(TaskListWrapper)\n"],"names":["Option","Select","EditableContext","React","roles","token","EditableRow","_ref","index","props","form","Form","useForm","_jsx","component","children","Provider","value","EditableCell","_ref2","title","editable","dataIndex","record","handleSave","restProps","editing","setEditing","useState","inputRef","useRef","useContext","useEffect","_inputRef$current","current","focus","toggleEdit","setFieldsValue","save","async","values","validateFields","errInfo","console","log","childNode","Item","style","margin","name","rules","required","message","concat","Input","ref","onPressEnter","onBlur","className","paddingRight","onClick","RangePicker","DatePicker","withRouter","loading","setloading","actionTaken","setActionTaken","data","setData","maindata_to_me","setmaindata_To_Me","maindata_by_me","setmaindata_By_Me","assigned_to_me","setAssigned_to_me","assigned_by_me","setAssigned_by_me","tabSelected","settabSelected","AssignedToSort","setAssignedToSort","AssignedBySort","setAssignBySort","CreatedOnSort","setCreatedOnSort","StatusSort","setStatusSort","CompeleSort","setCompleteSort","AssignedToTC","setAssignedToTC","AssignedByTC","setAssignedByTC","CreatedOn","setCreatedOn","Status","setStatus","completedOn","setcompletedOn","row_count","setrow_count","row_count2","setrow_count2","setCurrent","current2","setCurrent2","count","setCount","count2","setCount2","sortflag","setSortflag","sortflag2","setSortflag2","users","setUsers","users2","setUsers2","fromDate","setfromDate","toDate","settoDate","contactInfo","setContactInfo","keyword","user","username","setusername","username2","setusername2","paginflag","setpaginflag","currentPage","setCurrentPage","currentPage1","setCurrentPage1","sorter","setsorter","columnKey","order","sorter2","setsorter2","getTasksforme","getTasksbyme","columns","key","a","b","ac4","localeCompare","render","item","Link","to","pathname","state","prod_id","productpage_id","task","assigned_to","created_on","moment","format","_Fragment","status","cursor","map","col","onCell","row","payload","content","fetch","mainConfig","MAIN_ENDPOINT","task_id","method","headers","Authorization","Accept","body","JSON","stringify","then","response","json","success","catch","err","columns1","assigned_by","_jsxs","TaskAction","TaskAction1","localStorage","clear","window","location","reload","assigned_to_me_count","assigned_by_me_count","po","product_id","user_id","components","cell","parse","getItem","TabValue","marginTop","color","onSubmit","e","preventDefault","prodData1","from_date","to_date","tasks_assigned_to_me","tasks_assigned_by_me","Row","justify","gutter","xs","sm","md","lg","Col","span","offset","defaultValue","onChange","date","tempDate","tempDate1","ondateSelect","type","placeholder","target","z","id","d","u","reset","Tabs","defaultActiveKey","items","i","String","label","Table","dataSource","pagination","scroll","x","y","Pagination","total","defaultCurrent","defaultPageSize","hideOnSinglePage","showSizeChanger","KTSVG","path"],"sourceRoot":""}