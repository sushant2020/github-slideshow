{"version":3,"file":"static/js/725.eda06d96.chunk.js","mappings":"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","sources":["app/pages/mainPages/PriceUpdateNew.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Form, Input, InputNumber, Popconfirm, Table, Typography } from 'antd';\n\ninterface Item {\n  key: string;\n  name: string;\n  age: number;\n  address: string;\n}\n\nconst originData: Item[] = [];\nfor (let i = 0; i < 100; i++) {\n  originData.push({\n    key: i.toString(),\n    name: `Edward ${i}`,\n    age: 32,\n    address: `London Park no. ${i}`,\n  });\n}\ninterface EditableCellProps extends React.HTMLAttributes<HTMLElement> {\n  editing: boolean;\n  dataIndex: string;\n  title: any;\n  inputType: 'number' | 'text';\n  record: Item;\n  index: number;\n  children: React.ReactNode;\n}\n\nconst EditableCell: React.FC<EditableCellProps> = ({\n  editing,\n  dataIndex,\n  title,\n  inputType,\n  record,\n  index,\n  children,\n  ...restProps\n}) => {\n  const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\n\n  return (\n    <td {...restProps}>\n      {editing ? (\n        <Form.Item\n          name={dataIndex}\n          style={{ margin: 0 }}\n          rules={[\n            {\n              required: true,\n              message: `Please Input ${title}!`,\n            },\n          ]}\n        >\n          {inputNode}\n        </Form.Item>\n      ) : (\n        children\n      )}\n    </td>\n  );\n};\n\nconst PriceUpdateNew= () => {\n  const [form] = Form.useForm();\n  const [data, setData] = useState(originData);\n  const [editingKey, setEditingKey] = useState('');\n\n  const isEditing = (record: Item) => record.key === editingKey;\n\n  const edit = (record: Partial<Item> & { key: React.Key }) => {\n    form.setFieldsValue({ name: '', age: '', address: '', ...record });\n    setEditingKey(record.key);\n  };\n\n  const cancel = () => {\n    setEditingKey('');\n  };\n\n  const save = async (key: React.Key) => {\n    try {\n      const row = (await form.validateFields()) as Item;\n\n      const newData = [...data];\n      const index = newData.findIndex((item) => key === item.key);\n      if (index > -1) {\n        const item = newData[index];\n        newData.splice(index, 1, {\n          ...item,\n          ...row,\n        });\n        setData(newData);\n        setEditingKey('');\n      } else {\n        newData.push(row);\n        setData(newData);\n        setEditingKey('');\n      }\n    } catch (errInfo) {\n      console.log('Validate Failed:', errInfo);\n    }\n  };\n\n  const columns = [\n    {\n      title: 'name',\n      dataIndex: 'name',\n      width: '25%',\n      editable: true,\n    },\n    {\n      title: 'age',\n      dataIndex: 'age',\n      width: '15%',\n      editable: true,\n    },\n    {\n      title: 'address',\n      dataIndex: 'address',\n      width: '40%',\n      editable: true,\n    },\n    {\n      title: 'operation',\n      dataIndex: 'operation',\n      render: (_: any, record: Item) => {\n        const editable = isEditing(record);\n        return editable ? (\n          <span>\n            <Typography.Link onClick={() => save(record.key)} style={{ marginRight: 8 }}>\n              Save\n            </Typography.Link>\n            <Popconfirm title=\"Sure to cancel?\" onConfirm={cancel}>\n              <a>Cancel</a>\n            </Popconfirm>\n          </span>\n        ) : (\n          <Typography.Link disabled={editingKey !== ''} onClick={() => edit(record)}>\n            Edit\n          </Typography.Link>\n        );\n      },\n    },\n  ];\n\n  const mergedColumns = columns.map((col) => {\n    if (!col.editable) {\n      return col;\n    }\n    return {\n      ...col,\n      onCell: (record: Item) => ({\n        record,\n        inputType: col.dataIndex === 'age' ? 'number' : 'text',\n        dataIndex: col.dataIndex,\n        title: col.title,\n        editing: isEditing(record),\n      }),\n    };\n  });\n\n  return (\n    <>\n    jsahgdfjshg\n    <Form form={form} component={false}>\n      <Table\n        components={{\n          body: {\n            cell: EditableCell,\n          },\n        }}\n        bordered\n        dataSource={data}\n        columns={mergedColumns}\n        rowClassName=\"editable-row\"\n        pagination={{\n          onChange: cancel,\n        }}\n      />\n    </Form>\n    </>\n  );\n};\n\nexport default PriceUpdateNew;"],"names":["originData","i","push","key","toString","name","concat","age","address","EditableCell","_ref","editing","dataIndex","title","inputType","record","index","children","restProps","inputNode","_jsx","InputNumber","Input","Form","Item","style","margin","rules","required","message","PriceUpdateNew","form","useForm","data","setData","useState","editingKey","setEditingKey","isEditing","cancel","mergedColumns","width","editable","render","_","_jsxs","Typography","Link","onClick","async","row","validateFields","newData","findIndex","item","splice","errInfo","console","log","save","marginRight","Popconfirm","onConfirm","disabled","setFieldsValue","edit","map","col","onCell","_Fragment","component","Table","components","body","cell","bordered","dataSource","columns","rowClassName","pagination","onChange"],"sourceRoot":""}