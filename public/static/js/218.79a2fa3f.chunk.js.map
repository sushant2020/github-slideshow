{"version":3,"file":"static/js/218.79a2fa3f.chunk.js","mappings":"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","sources":["app/pages/mainPages/Concerto.tsx"],"sourcesContent":["import React, {useEffect, useState} from 'react'\nimport {mainConfig} from '../../../config/mainConfig'\nimport moment from 'moment'\nimport {KTSVG} from '../../../_metronic/helpers'\nimport {message, Spin} from 'antd'\n\n\n\nlet token = '',\n  count = 0\nexport default function Concerto() {\n  \n\n\n  const [AllDownloadedPos, setAllDownloadedPos] = useState<any[]>([])\n  const [editMode, seteditMode] = useState<any>(false)\n  const [UniqueValue, setUniqueValue] = useState<any>('')\n  const [ConcertReferenceValue, setConcertReferenceValue] = useState<any>('')\n  const [loadingCon, setloadingCon] = useState<any>(false)\n  const [poNumber, setpoNumber] = useState<any>('PONumber')\n  const [poNumberSort, setpoNumberSort] = useState<any>('Asc')\n  const [supplierCode, setsupplierCode] = useState<any>('SupplierCode')\n  const [supplierCodeSort, setsupplierCodeSort] = useState<any>('Asc')\n  const [raiseAt, setraiseAt] = useState<any>('RaiseAt')\n  const [raiseAtSort, setraiseAtSort] = useState<any>('Asc')\n  const [groupId, setgroupId] = useState<any>('UniqueId')\n  const [groupIdSort,setgroupIdSort]=useState<any>('Asc')\n  useEffect(() => {\n    getAllDownloadedPos()\n  }, [])\n\n  const getAllDownloadedPos = () => {\n    setloadingCon(true)\n\n    fetch(`${mainConfig.MAIN_ENDPOINT}/api/all-downloaded-pos`, {\n      method: 'get',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n    })\n      .then(function (response) {\n        response.json().then(function (data) {\n          if (data.data.error == 'No any Purchase Order data found') {\n            setAllDownloadedPos([])\n          } else {\n            setAllDownloadedPos(data.data)\n          }\n\n          setloadingCon(false)\n        })\n      })\n      .catch(function (err) {})\n  }\n  const handlechangeEdit = (data: any) => {\n    setUniqueValue(data.group_id)\n    seteditMode(true)\n    setConcertReferenceValue(data.concerto_reference)\n  }\n  const onClose = (data: any) => {\n    setUniqueValue('')\n    seteditMode(false)\n  }\n  const onSubmit = (data: any) => {\n    const playload = {\n      concerto_reference: ConcertReferenceValue,\n    }\n    seteditMode(false)\n    setUniqueValue('')\n    try {\n      fetch(`${mainConfig.MAIN_ENDPOINT}/api/add-concerto-reference/${data.group_id}`, {\n        method: 'put',\n        headers: {\n          Authorization: `Bearer ${token}`,\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(playload),\n      })\n        .then(function (response) {\n          if (response.status != 200) {\n          }\n          response.json().then(function (data) {\n            if (data.success == 'error') {\n            }\n            message.success(data.message)\n            getAllDownloadedPos()\n          })\n        })\n        .catch(function (err) {})\n    } catch (err) {\n      \n    }\n  }\n  const onSortConcerto = (data: any) => {\n    let array = AllDownloadedPos\n   \n\n    switch (data) {\n      case 'PONumber':\n        if (poNumberSort == 'Asc') {\n          setpoNumberSort('Desc')\n          array = AllDownloadedPos.sort((a, b) => a.po_num.localeCompare(b.po_num))\n          setAllDownloadedPos(array)\n        }\n        if (poNumberSort == 'Desc') {\n          setpoNumberSort('Asc')\n          array = AllDownloadedPos.sort((a, b) => b.po_num.localeCompare(a.po_num))\n          setAllDownloadedPos(array)\n        }\n        return\n\n      case 'SupplierCode':\n        if (supplierCodeSort == 'Asc') {\n          setsupplierCodeSort('Desc')\n          array = AllDownloadedPos.sort((a, b) => a.code.localeCompare(b.code))\n          setAllDownloadedPos(array)\n        }\n        if (supplierCodeSort == 'Desc') {\n          setsupplierCodeSort('Asc')\n          array = AllDownloadedPos.sort((a, b) => b.code.localeCompare(a.code))\n          setAllDownloadedPos(array)\n        }\n\n        return\n\n      case 'RaiseAt':\n        if (raiseAtSort == 'Asc') {\n          setraiseAtSort('Desc')\n          array = AllDownloadedPos.sort((a, b) => a.created_at.localeCompare(b.created_at))\n          setAllDownloadedPos(array)\n        }\n        if (raiseAtSort == 'Desc') {\n          setraiseAtSort('Asc')\n          array = AllDownloadedPos.sort((a, b) => b.created_at.localeCompare(a.created_at))\n          setAllDownloadedPos(array)\n        }\n        return\n\n        case 'UniqueId':\n        if (groupIdSort=='Asc')\n        {\n          setgroupIdSort('Desc');\n          array = AllDownloadedPos.sort((a, b) => a.group_num.localeCompare(b.group_num));\n          setAllDownloadedPos(array)\n        }\n        if (groupIdSort=='Desc')\n        {\n          setgroupIdSort('Asc');\n          array = AllDownloadedPos.sort((a, b) => b.group_num.localeCompare(a.group_num));\n          setAllDownloadedPos(array)\n        }\n        return\n    }\n  }\n\n  token = JSON.parse(localStorage.getItem('portalUserDataToken') || '')\n  return (\n    <React.Fragment>\n      <div className='card card-docs mb-2' style={{minHeight: '700'}}>\n        <div className='card-body fs-6 py-15 px-10 py-lg-15 px-lg-15 text-gray-700'>\n          <div className='pb-10'>\n            <h1 className='anchor fw-bolder mb-5' id='overview'>\n              <span style={{color: 'rgb(138, 38, 80)'}}>PO-Concerto-Mapping</span>\n            </h1>\n\n            <div className='table-responsive  h-500px table-scroll borderd'>\n              <table className='table table-rounded table-row-bordered border-gray-600 gy-7 gs-7'>\n                {loadingCon == true ? (\n                  <div className='text-center'>\n                    <Spin spinning={loadingCon} size={'large'} tip={'loading...'}></Spin>\n                  </div>\n                ) : (\n                  <React.Fragment>\n                    <thead>\n                      <tr className='border-bottom fw-bold fs-6 text-gray-500  main-table'>\n                        <th onClick={() => onSortConcerto(poNumber)}>\n                          PO-Number\n                          {poNumberSort != 'Desc' ? (\n                            <KTSVG\n                              className='text-hover-primary '\n                              path={'/media/icons/duotune/arrows/arr062.svg'}\n                            />\n                          ) : (\n                            <KTSVG\n                              className='text-hover-primary '\n                              path={'/media/icons/duotune/arrows/arr068.svg'}\n                            />\n                          )}\n                        </th>\n                        <th onClick={() => onSortConcerto(supplierCode)}>\n                          Supplier Code\n                          {supplierCodeSort != 'Desc' ? (\n                            <KTSVG\n                              className='text-hover-primary '\n                              path={'/media/icons/duotune/arrows/arr062.svg'}\n                            />\n                          ) : (\n                            <KTSVG\n                              className='text-hover-primary '\n                              path={'/media/icons/duotune/arrows/arr068.svg'}\n                            />\n                          )}\n                        </th>\n                        <th>Raised By</th>\n                        <th onClick={() => onSortConcerto(raiseAt)}>\n                          Raised At{' '}\n                          {raiseAtSort != 'Desc' ? (\n                            <KTSVG\n                              className='text-hover-primary '\n                              path={'/media/icons/duotune/arrows/arr062.svg'}\n                            />\n                          ) : (\n                            <KTSVG\n                              className='text-hover-primary '\n                              path={'/media/icons/duotune/arrows/arr068.svg'}\n                            />\n                          )}\n                        </th>\n                        <th onClick={()=>{\n                          onSortConcerto(groupId)\n                        }}>Unique Id\n                        \n                         {groupIdSort != 'Desc' ? (\n                            <KTSVG\n                              className='text-hover-primary '\n                              path={'/media/icons/duotune/arrows/arr062.svg'}\n                            />\n                          ) : (\n                            <KTSVG\n                              className='text-hover-primary '\n                              path={'/media/icons/duotune/arrows/arr068.svg'}\n                            />\n                          )}\n                        \n                        </th>\n                        <th>Concerto Reference</th>\n                      </tr>\n                    </thead>\n                    <tbody className='border-solid'>\n                      {AllDownloadedPos.map((j: any, i: any) => {\n                        let countfirst = j.group_id,\n                          lengthmain = AllDownloadedPos.length - 1,\n                          countsecond = lengthmain\n                            ? AllDownloadedPos[i + 1]\n                            : AllDownloadedPos[lengthmain],\n                          counthird = countsecond ? countsecond.group_id : 1,\n                          notequal = false\n\n                        if (countfirst != counthird) {\n                          notequal = true\n                        }\n\n                        return (\n                          <tr className='border border-grey'>\n                            <td className='border border-grey'>{j.po_num}</td>\n                            <td className='border border-grey'>{j.code}</td>\n                            <td className='border border-grey'>{j.created_by}</td>\n                            <td className='border border-grey'>\n                              {moment(j.created_at).format('DD-MMM-YYYY')}\n                            </td>\n\n                            {notequal === true ? (\n                              <React.Fragment>\n                                {i == 0 ? (\n                                  <React.Fragment>\n                                    {' '}\n                                    <td>{j.group_num}</td>\n                                  </React.Fragment>\n                                ) : (\n                                  <React.Fragment>\n                                    <td style={{borderTop: 'none'}}>{j.group_num}</td>\n                                  </React.Fragment>\n                                )}\n\n                                {UniqueValue == j.group_id ? (\n                                  <td>\n                                    <form>\n                                      <div style={{display: 'flex'}}>\n                                        <input\n                                          type='text'\n                                          value={ConcertReferenceValue}\n                                          onChange={(e) => setConcertReferenceValue(e.target.value)}\n                                          className='form-control form-control-solid input-sm'\n                                          placeholder=''\n                                        />\n                                        &nbsp;\n                                        <span style={{cursor: 'pointer', marginTop: '5%'}}>\n                                          <div\n                                            onClick={(e) => onClose(e)}\n                                            className='btn btn-icon btn-danger'\n                                          >\n                                            <KTSVG\n                                              path='/media/icons/duotune/general/gen034.svg'\n                                              className='svg-icon-3'\n                                            />\n                                          </div>\n                                        </span>\n                                        &nbsp;\n                                        <span style={{cursor: 'pointer', marginTop: '5%'}}>\n                                          <div\n                                            onClick={(e) => onSubmit(j)}\n                                            className='btn btn-icon btn-success'\n                                          >\n                                            <KTSVG\n                                              path='/media/icons/duotune/general/gen037.svg'\n                                              className='svg-icon-3 text-white'\n                                            />\n                                          </div>\n                                        </span>\n                                      </div>\n                                    </form>\n                                  </td>\n                                ) : i == 0 ? (\n                                  <React.Fragment>\n                                    {' '}\n                                    <td className='d-flex '>\n                                      {j.concerto_reference == '' ? (\n                                        <React.Fragment>\n                                          <input\n                                            type='text'\n                                            className='form-control sm'\n                                            disabled\n                                            placeholder=''\n                                          />\n                                        </React.Fragment>\n                                      ) : (\n                                        <React.Fragment>\n                                          <input\n                                            type='text'\n                                            className='form-control sm'\n                                            disabled\n                                            placeholder=''\n                                            value={j.concerto_reference}\n                                          />\n                                        </React.Fragment>\n                                      )}\n                                      &nbsp; &nbsp;\n                                      <span\n                                        className='btn btn-icon btn-warning'\n                                        onClick={() => {\n                                          handlechangeEdit(j)\n                                        }}\n                                      >\n                                        <i className='fas fa-edit fs-6 me-1'></i>\n                                      </span>\n                                    </td>\n                                  </React.Fragment>\n                                ) : (\n                                  <td className='d-flex ' style={{borderTop: 'none'}}>\n                                    {j.concerto_reference == '' ? (\n                                      <React.Fragment>\n                                        <input\n                                          type='text'\n                                          className='form-control sm'\n                                          disabled\n                                          placeholder=''\n                                        />\n                                      </React.Fragment>\n                                    ) : (\n                                      <React.Fragment>\n                                        <input\n                                          type='text'\n                                          className='form-control sm'\n                                          disabled\n                                          placeholder=''\n                                          value={j.concerto_reference}\n                                        />\n                                      </React.Fragment>\n                                    )}{' '}\n                                    &nbsp; &nbsp;\n                                    <span\n                                      className='btn btn-icon btn-warning'\n                                      onClick={() => {\n                                        handlechangeEdit(j)\n                                      }}\n                                    >\n                                      <i className='fas fa-edit fs-6 me-1'></i>\n                                    </span>\n                                  </td>\n                                )}\n                              </React.Fragment>\n                            ) : (\n                              <td style={{borderBottom: 'none', borderTop: 'none'}}></td>\n                            )}\n                          </tr>\n                        )\n                      })}\n                    </tbody>\n                  </React.Fragment>\n                )}\n              </table>\n            </div>\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  )\n}\n"],"names":["token","Concerto","AllDownloadedPos","setAllDownloadedPos","useState","editMode","seteditMode","UniqueValue","setUniqueValue","ConcertReferenceValue","setConcertReferenceValue","loadingCon","setloadingCon","poNumber","setpoNumber","poNumberSort","setpoNumberSort","supplierCode","setsupplierCode","supplierCodeSort","setsupplierCodeSort","raiseAt","setraiseAt","raiseAtSort","setraiseAtSort","groupId","setgroupId","groupIdSort","setgroupIdSort","useEffect","getAllDownloadedPos","fetch","concat","mainConfig","MAIN_ENDPOINT","method","headers","Authorization","Accept","then","response","json","data","error","catch","err","handlechangeEdit","group_id","concerto_reference","onSortConcerto","array","sort","a","b","po_num","localeCompare","code","created_at","group_num","JSON","parse","localStorage","getItem","_jsx","React","children","className","style","minHeight","_jsxs","id","color","Spin","spinning","size","tip","onClick","KTSVG","path","map","j","i","countfirst","lengthmain","length","countsecond","notequal","created_by","moment","format","borderTop","display","type","value","onChange","e","target","placeholder","cursor","marginTop","playload","body","stringify","status","success","message","onSubmit","disabled","borderBottom"],"sourceRoot":""}